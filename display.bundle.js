"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[95],{882:(e,t,n)=>{function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}n.d(t,{Z:()=>r})},946:(e,t,n)=>{function r(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}n.d(t,{Z:()=>r})},598:(e,t,n)=>{n.d(t,{Z:()=>ae});var r=n(882);function a(e){return(0,r.Z)(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}var o=n(13);function i(e){if((0,r.Z)(1,arguments),!a(e)&&"number"!=typeof e)return!1;var t=(0,o.Z)(e);return!isNaN(Number(t))}var s={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};const u=function(e,t,n){var r,a=s[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r};function c(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var d={date:c({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:c({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:c({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var l={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function m(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,u=a.width?String(a.width):e.defaultWidth;r=e.values[u]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function h(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],u=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(u)?g(u,(function(e){return e.test(s)})):f(u,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var d=t.slice(s.length);return{value:i,rest:d}}}function f(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function g(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var v;const y={code:"en-US",formatDistance:u,formatLong:d,formatRelative:function(e,t,n,r){return l[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:m({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:m({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:m({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:m({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:m({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(v={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(v.matchPattern);if(!n)return null;var r=n[0],a=e.match(v.parsePattern);if(!a)return null;var o=v.valueCallback?v.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:h({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:h({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:h({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:h({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:h({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var p=n(946);function w(e,t){(0,r.Z)(2,arguments);var n=(0,o.Z)(e).getTime(),a=(0,p.Z)(t);return new Date(n+a)}function b(e,t){(0,r.Z)(2,arguments);var n=(0,p.Z)(t);return w(e,-n)}var S=864e5;function C(e){(0,r.Z)(1,arguments);var t=1,n=(0,o.Z)(e),a=n.getUTCDay(),i=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function E(e){(0,r.Z)(1,arguments);var t=(0,o.Z)(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var i=C(a),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var u=C(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=u.getTime()?n:n-1}function k(e){(0,r.Z)(1,arguments);var t=E(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var a=C(n);return a}var T=6048e5;function M(e,t){(0,r.Z)(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,s=null==i?0:(0,p.Z)(i),u=null==n.weekStartsOn?s:(0,p.Z)(n.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=(0,o.Z)(e),d=c.getUTCDay(),l=(d<u?7:0)+d-u;return c.setUTCDate(c.getUTCDate()-l),c.setUTCHours(0,0,0,0),c}function q(e,t){(0,r.Z)(1,arguments);var n=(0,o.Z)(e),a=n.getUTCFullYear(),i=t||{},s=i.locale,u=s&&s.options&&s.options.firstWeekContainsDate,c=null==u?1:(0,p.Z)(u),d=null==i.firstWeekContainsDate?c:(0,p.Z)(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(a+1,0,d),l.setUTCHours(0,0,0,0);var m=M(l,t),h=new Date(0);h.setUTCFullYear(a,0,d),h.setUTCHours(0,0,0,0);var f=M(h,t);return n.getTime()>=m.getTime()?a+1:n.getTime()>=f.getTime()?a:a-1}function D(e,t){(0,r.Z)(1,arguments);var n=t||{},a=n.locale,o=a&&a.options&&a.options.firstWeekContainsDate,i=null==o?1:(0,p.Z)(o),s=null==n.firstWeekContainsDate?i:(0,p.Z)(n.firstWeekContainsDate),u=q(e,t),c=new Date(0);c.setUTCFullYear(u,0,s),c.setUTCHours(0,0,0,0);var d=M(c,t);return d}var L=6048e5;function j(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const x={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return j("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):j(n+1,2)},d:function(e,t){return j(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return j(e.getUTCHours()%12||12,t.length)},H:function(e,t){return j(e.getUTCHours(),t.length)},m:function(e,t){return j(e.getUTCMinutes(),t.length)},s:function(e,t){return j(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return j(Math.floor(r*Math.pow(10,n-3)),t.length)}};var Z="midnight",P="noon",N="morning",U="afternoon",W="evening",I="night",Y={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return x.y(e,t)},Y:function(e,t,n,r){var a=q(e,r),o=a>0?a:1-a;return"YY"===t?j(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):j(o,t.length)},R:function(e,t){return j(E(e),t.length)},u:function(e,t){return j(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return j(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return x.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var i=function(e,t){(0,r.Z)(1,arguments);var n=(0,o.Z)(e),a=M(n,t).getTime()-D(n,t).getTime();return Math.round(a/L)+1}(e,a);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):j(i,t.length)},I:function(e,t,n){var a=function(e){(0,r.Z)(1,arguments);var t=(0,o.Z)(e),n=C(t).getTime()-k(t).getTime();return Math.round(n/T)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):j(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):x.d(e,t)},D:function(e,t,n){var a=function(e){(0,r.Z)(1,arguments);var t=(0,o.Z)(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),i=n-a;return Math.floor(i/S)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):j(a,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return j(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return j(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return j(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?P:0===a?Z:a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?W:a>=12?U:a>=4?N:I,t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return x.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):x.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):x.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):x.s(e,t)},S:function(e,t){return x.S(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return O(a);case"XXXX":case"XX":return H(a);default:return H(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return O(a);case"xxxx":case"xx":return H(a);default:return H(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+A(a,":");default:return"GMT"+H(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+A(a,":");default:return"GMT"+H(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return j(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return j((r._originalDate||e).getTime(),t.length)}};function A(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+j(o,2)}function O(e,t){return e%60==0?(e>0?"-":"+")+j(Math.abs(e)/60,2):H(e,t)}function H(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+j(Math.floor(a/60),2)+n+j(a%60,2)}const B=Y;function F(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function G(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var z={p:G,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return F(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",F(a,t)).replace("{{time}}",G(o,t))}};const Q=z;function X(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var J=["D","DD"],R=["YY","YYYY"];function _(e){return-1!==J.indexOf(e)}function V(e){return-1!==R.indexOf(e)}function K(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var $=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ee=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,te=/^'([^]*?)'?$/,ne=/''/g,re=/[a-zA-Z]/;function ae(e,t,n){(0,r.Z)(2,arguments);var a=String(t),s=n||{},u=s.locale||y,c=u.options&&u.options.firstWeekContainsDate,d=null==c?1:(0,p.Z)(c),l=null==s.firstWeekContainsDate?d:(0,p.Z)(s.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=u.options&&u.options.weekStartsOn,h=null==m?0:(0,p.Z)(m),f=null==s.weekStartsOn?h:(0,p.Z)(s.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var g=(0,o.Z)(e);if(!i(g))throw new RangeError("Invalid time value");var v=X(g),w=b(g,v),S={firstWeekContainsDate:l,weekStartsOn:f,locale:u,_originalDate:g},C=a.match(ee).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Q[t])(e,u.formatLong,S):e})).join("").match($).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return oe(n);var a=B[r];if(a)return!s.useAdditionalWeekYearTokens&&V(n)&&K(n,t,e),!s.useAdditionalDayOfYearTokens&&_(n)&&K(n,t,e),a(w,n,u.localize,S);if(r.match(re))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return C}function oe(e){return e.match(te)[1].replace(ne,"'")}},119:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(13),a=n(882);function o(e){(0,a.Z)(1,arguments);var t=(0,r.Z)(e);return t.setHours(0,0,0,0),t}},366:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(119);function a(){return(0,r.Z)(Date.now())}},13:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(882);function a(e){(0,r.Z)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}},374:(e,t,n)=>{n.d(t,{Q0:()=>C,M5:()=>M,Yf:()=>b});var r=n(119),a=n(882);function o(e,t){(0,a.Z)(2,arguments);var n=(0,r.Z)(e),o=(0,r.Z)(t);return n.getTime()===o.getTime()}var i=n(13);var s=n(946);function u(e,t){(0,a.Z)(2,arguments);var n=(0,i.Z)(e),r=(0,s.Z)(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}var c=n(598),d=n(366),l=n(486),m=n.n(l),h=n(96),f=n(464),g=n(332);const v=e=>{const t=e.id,n=document.createElement("div");n.classList.add("task-item"),n.dataset.taskId=t;let r=[];["left","right"].forEach((e=>{const t=document.createElement("div");t.classList.add(e),r.push(t)}));for(let t=0;t<r.length;t++){const n=document.createElement("div");n.classList.add("details");const a=document.createElement("h2"),o=document.createElement("p");0===t?(a.textContent=e.name,o.textContent=e.description):(a.textContent=e.date?(0,c.Z)(e.date,"d MMM yyyy"):"",o.textContent=3===e.projectId?"":f.IE.findProject(e.projectId).name),n.append(a,o),r[t].append(n)}return r=((e,t)=>{for(let n=0;n<e.length;n++)if(0===n){const r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("item-check"),r.dataset.taskId=t.id,r.dataset.priority=t.priority,r.dataset.completed=t.completed,"none"===r.dataset.priority&&r.classList.add("filter"),r.addEventListener("click",(()=>T(r.dataset.taskId))),e[n].insertBefore(r,e[n].firstElementChild)}else{const r=["item-edit","item-remove"],a=document.createElement("div");a.classList.add("item-buttons");for(let e=0;e<r.length;e++){const n=document.createElement("button");n.setAttribute("type","button"),n.classList.add(r[e]),n.dataset.taskId=t.id,0===e?n.addEventListener("click",(()=>(0,g.JG)(n.dataset.taskId))):n.addEventListener("click",(()=>E(n.dataset.taskId))),a.appendChild(n)}e[n].append(a)}return e})(r,e),n.append(...r),n},y=(e,t,n)=>{const r=document.querySelector("#list-title"),a=document.querySelector("#main-display"),o=document.querySelector("#pending-task-list"),i=document.querySelector("#completed-task-list");r.textContent=e,a.dataset.listId=t,(()=>{const e=document.querySelector("#pending-task-list"),t=document.querySelector("#completed-task-list");for(;e.childElementCount>0;)e.removeChild(e.firstElementChild);for(;t.childElementCount>0;)t.removeChild(t.firstElementChild)})(),n.filter((e=>!e.completed)).length<1&&(()=>{const e=document.querySelector("#pending-task-list"),t=document.createElement("div"),n=["All good!","All done!","What's the plan?","Let's get started!","Whew, no tasks!","Good to go!"],r=["illus-0","illus-1","illus-2","illus-3","illus-4"];t.classList.add("empty-splash"),t.setAttribute("id",r[Math.floor(Math.random()*r.length)]),t.textContent=n[Math.floor(Math.random()*n.length)],e.append(t)})(),n.forEach((e=>{const t=v(e);e.completed?i.insertBefore(t,i.firstElementChild):o.insertBefore(t,o.firstElementChild)})),(0,g.Z4)(),(0,h.W8)(),(0,f.vj)()},p=e=>{const t=Number(e);let n=h.B5.read();if(t<3)switch(t){case 1:n=n.filter((e=>function(e){return(0,a.Z)(1,arguments),o(e,Date.now())}(e.date)));break;case 2:n=n.filter((e=>function(e){return function(e,t){(0,a.Z)(2,arguments);var n=(0,i.Z)(e).getTime(),r=(0,i.Z)(t.start).getTime(),o=(0,i.Z)(t.end).getTime();if(!(r<=o))throw new RangeError("Invalid interval");return n>=r&&n<=o}(e.date,{start:(0,d.Z)(),end:u((0,d.Z)(),8)})}(e)))}else n=f.IE.findProject(t).taskList();return n},w=e=>{const t=Number(e),n=p(e);let r;if(t<3)switch(t){case 0:r="All";break;case 1:r="Today";break;case 2:r="Next 7 Days"}else r=f.IE.findProject(e).name;(e=>{const t=Number(e),n=document.querySelectorAll(".home-item"),r=document.querySelectorAll(".project-item");e<4?([...r].forEach((e=>e.parentElement.classList.remove("set-active"))),[...n].forEach((e=>{Number(e.dataset.sortId)===t?e.classList.add("set-active"):e.classList.remove("set-active")}))):([...n].forEach((e=>e.classList.remove("set-active"))),[...r].forEach((e=>{Number(e.dataset.projectId)===t?e.parentElement.classList.add("set-active"):e.parentElement.classList.remove("set-active")})))})(e),y(r,e,n)},b=(e=document.querySelector("#main-display").dataset.listId)=>{w(e)},S=(e,t)=>{t.querySelector(".project-left").addEventListener("click",(()=>w(e.id)));t.querySelector(".project-remove").addEventListener("click",(()=>function(e){const t=Number(e.dataset.projectId);let n=Number(document.querySelector("#main-display").dataset.listId);f.IE.findProject(t).taskList().forEach((e=>h.B5.remove(e.id))),f.IE.remove(t),e.parentElement.remove(),n>t?(n-=1,w(n)):n===t?w(3):b();(e=>{const t=document.querySelector("#rename-project-form"),{renameId:n}=t.dataset;"null"!==n&&Number(n)>e&&(t.dataset.renameId-=1);[...document.querySelectorAll("[data-project-id]")].forEach((t=>{Number(t.dataset.projectId)>e&&(t.dataset.projectId-=1)})),(0,g.tl)(),(0,g.Z4)(),(0,h.W8)(),(0,f.vj)()})(t)}(t)));return t.querySelector(".project-edit").addEventListener("click",(()=>(0,g.GY)(e.id,t))),t},C=e=>{const t=document.querySelector("#project-list"),n=(e=>{const t=e.id,n=document.createElement("div");n.classList.add("display-wrapper");let r=document.createElement("div");r.classList.add("project-item"),r.dataset.projectId=t;const a=document.createElement("div");a.classList.add("project-left");const o=document.createElement("div");o.classList.add("nav-icon","project-icon","filter");const i=document.createElement("span");i.textContent=e.name,a.append(o,i);const s=document.createElement("div");s.classList.add("project-buttons");const u=["project-edit","project-remove"];for(let e=0;e<u.length;e++){const n=document.createElement("button");n.classList.add(u[e]),n.dataset.projectId=t,s.appendChild(n)}return r.append(a,s),r=S(e,r),n.appendChild(r),n})(e);t.appendChild(n),(0,g.tl)(),(0,g.Z4)(),(0,h.W8)(),(0,f.vj)()};function E(e){h.B5.remove(e),b()}function k(){const e=document.querySelector("#main-display").dataset.listId;p(e).filter((e=>!0===e.completed)).forEach((e=>E(e.id)))}function T(e){h.B5.findTask(e).toggleStatus(),b()}function M(){(0,h.Ny)(),(0,f.Pw)(),m().drop(f.IE.read(),1).forEach((e=>C(e))),(0,g.x9)(),function(){document.querySelectorAll(".home-item").forEach((e=>{e.addEventListener("click",(()=>w(e.dataset.sortId)))})),document.querySelector("#remove-completed").addEventListener("click",k),document.querySelector("#backdrop").addEventListener("click",(()=>{const e=document.querySelector('[data-active-modal="true"]');(0,g.VG)(e.id)}));const e=document.querySelector("#hamburger"),t=document.querySelectorAll("#hamburger > div"),[...n]=document.querySelectorAll("#main-display, nav");e.addEventListener("click",(()=>{t.forEach((e=>e.classList.toggle("open"))),n.forEach((e=>e.classList.toggle("slide-open")))}));const r=document.querySelector("#mode-toggle"),a=r.querySelectorAll("img"),o=document.querySelector("body");r.addEventListener("click",(()=>{a.forEach((e=>e.classList.toggle("mode-hidden"))),o.classList.toggle("light")}))}(),window.addEventListener("load",(()=>w(3)))}},332:(e,t,n)=>{n.d(t,{GY:()=>f,JG:()=>m,SC:()=>v,Tf:()=>h,VG:()=>g,Z4:()=>c,nF:()=>l,tl:()=>u,x9:()=>p});var r=n(598),a=n(366),o=n(96),i=n(464);const s=()=>{document.querySelector("#backdrop").classList.toggle("visible")},u=()=>{document.querySelector("#main-display").querySelectorAll("form").forEach((e=>{const t=e.querySelector("select");for(;t.childElementCount>0;)t.removeChild(t.firstElementChild);i.IE.read().forEach((e=>{const n=document.createElement("option");n.textContent=e.name,n.value=e.id,t.appendChild(n)}))}))},c=()=>{const e=Number(document.querySelector("#main-display").dataset.listId);document.querySelector("#add-task-form").querySelector("select").value=e>3?e:3},d=e=>{const t=e.querySelector('input[name="name"]'),n=e.querySelector(".submit");t.validity.valid?n.removeAttribute("disabled"):n.setAttribute("disabled"," ")},l=()=>{const e=document.querySelector("#main-display").dataset.listId,t=document.querySelector("#add-task-menu"),n=t.querySelector("form"),o=n.querySelector('input[type="date"]');n.reset(),t.classList.toggle("visible"),t.dataset.activeModal=!0,1===Number(e)&&(o.value=(0,r.Z)((0,a.Z)(),"yyyy-MM-dd")),s(),c(),d(n)},m=e=>{const t=document.querySelector("#edit-task-menu"),n=t.querySelector("form");t.classList.toggle("visible"),t.dataset.activeModal=!0,n.dataset.taskId=e,s(),(e=>{const t=document.querySelector("#edit-task-form"),n=t.querySelector("#task-name-edit"),a=t.querySelector("#task-description-edit"),i=t.querySelector("#task-date-edit"),s=t.querySelector("#project-edit"),u=t.querySelectorAll("input[name=priority-edit]"),c=o.B5.findTask(e);n.value=c.name,a.value=c.description,i.value=c.date?(0,r.Z)(c.date,"yyyy-MM-dd"):"",s.value=c.projectId,u.forEach((e=>{e.value===c.priority?e.setAttribute("checked",""):e.removeAttribute("checked")}))})(e),d(n)},h=()=>{const e=document.querySelector("#add-project-menu"),t=e.querySelector("form");e.classList.remove("display-none"),d(t)},f=(e,t)=>{const n=document.querySelector("#rename-project-menu"),r=document.querySelector("#rename-project-form"),a=r.querySelector('input[name="name"]'),o=document.querySelector("#project-list"),s=t.parentElement;"null"!==r.dataset.projectId&&v("rename-project-menu"),r.dataset.renameId=e,a.value=i.IE.findProject(e).name,o.insertBefore(n,s),s.classList.add("display-none"),n.classList.remove("display-none"),d(r)};function g(e){let t;switch(e){case"add-task-menu":t=document.querySelector("#add-task-menu");break;case"edit-task-menu":t=document.querySelector("#edit-task-menu"),t.firstElementChild.dataset.taskId=null}t.classList.toggle("visible"),t.dataset.activeModal=!1;const n=t.querySelector("form");setTimeout((()=>n.reset()),350),s()}function v(e){let t;switch(e){case"add-project-menu":t=document.querySelector("#add-project-menu");break;case"rename-project-menu":t=document.querySelector("#rename-project-menu"),(e=>{const t=document.querySelector("#project-list"),n=e;e.firstElementChild.dataset.renameId=null,n.nextElementSibling.classList.remove("display-none"),t.insertBefore(n,t.firstElementChild)})(t)}t.querySelector("form").reset(),t.classList.add("display-none")}const y=()=>{document.querySelectorAll("form").forEach((e=>{e.addEventListener("input",(()=>d(e))),e.addEventListener("submit",(e=>e.preventDefault()))})),(()=>{const e=document.querySelectorAll("input[type=date]"),t=(0,r.Z)(new Date,"yyyy-MM-dd");e.forEach((e=>e.setAttribute("min",t)))})(),u()},p=()=>{document.querySelectorAll(".cancel-modal").forEach((e=>{e.addEventListener("click",(e=>{g(e.target.dataset.menu)}))})),document.querySelectorAll(".cancel").forEach((e=>e.addEventListener("click",(e=>{v(e.target.dataset.menu)})))),y()}},464:(e,t,n)=>{n.d(t,{IE:()=>s,IK:()=>i,Pw:()=>c,vj:()=>u});var r=n(486),a=n.n(r),o=n(96);class i{constructor(e,t){this.id=e,this.name=t}taskList(){return o.B5.findProject(this.id)}}const s=(()=>{const e=[],t=t=>{const n=Number(t);return e.find((e=>e.id===n))};return{push:t=>e.push(t),read:()=>e,findProject:t,remove:n=>{const r=Number(n);a().remove(e,t(n)),e.forEach((e=>{e.id>r&&(e.taskList().forEach((e=>{e.projectId-=1})),e.id-=1)}))}}})(),u=()=>{localStorage.setItem("projectList",JSON.stringify(s.read()))};function c(){if("projectList"in localStorage){let e=JSON.parse(localStorage.getItem("projectList"));e=a().drop(e,1),e.forEach((e=>{s.push(new i(...Object.values(e)))}))}}},96:(e,t,n)=>{n.d(t,{iQ:()=>s,Ny:()=>d,W8:()=>c,B5:()=>u});var r=n(486),a=n.n(r),o=n(13),i=n(882);class s{constructor(e,t,n,r,a,o,i=!1){this.id=e,this.name=t,this.description=n,this.date=r,this.projectId=a,this.priority=o,this.completed=i}toggleStatus(){this.completed=!this.completed}}const u=(()=>{const e=[],t=t=>{const n=Number(t);return e.find((e=>e.id===n))};return{push:t=>e.push(t),read:()=>e,findTask:t,findProject:t=>{const n=Number(t);return e.filter((e=>e.projectId===n))},remove:n=>{const r=Number(n);a().remove(e,t(r)),e.forEach((e=>{e.id>r&&(e.id-=1)}))}}})();function c(){localStorage.setItem("taskList",JSON.stringify(u.read()))}function d(){if("taskList"in localStorage){JSON.parse(localStorage.getItem("taskList")).forEach((e=>{e.date=e.date?function(e){if((0,i.Z)(1,arguments),"string"==typeof e){var t=e.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return t?new Date(Date.UTC(+t[1],+t[2]-1,+t[3],+t[4]-(+t[9]||0)*("-"==t[8]?-1:1),+t[5]-(+t[10]||0)*("-"==t[8]?-1:1),+t[6],+((t[7]||"0")+"00").substring(0,3))):new Date(NaN)}return(0,o.Z)(e)}(e.date):null,u.push(new s(...Object.values(e)))}))}}}},e=>{var t;t=374,e(e.s=t)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,