"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[95],{882:(e,t,n)=>{function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}n.d(t,{Z:()=>r})},946:(e,t,n)=>{function r(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}n.d(t,{Z:()=>r})},598:(e,t,n)=>{n.d(t,{Z:()=>ae});var r=n(882);function a(e){return(0,r.Z)(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}var o=n(13);function i(e){if((0,r.Z)(1,arguments),!a(e)&&"number"!=typeof e)return!1;var t=(0,o.Z)(e);return!isNaN(Number(t))}var s={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};const u=function(e,t,n){var r,a=s[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r};function d(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var c={date:d({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:d({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:d({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var l={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function m(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,u=a.width?String(a.width):e.defaultWidth;r=e.values[u]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function h(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],u=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(u)?g(u,(function(e){return e.test(s)})):f(u,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var c=t.slice(s.length);return{value:i,rest:c}}}function f(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function g(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var v;const y={code:"en-US",formatDistance:u,formatLong:c,formatRelative:function(e,t,n,r){return l[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:m({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:m({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:m({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:m({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:m({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(v={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(v.matchPattern);if(!n)return null;var r=n[0],a=e.match(v.parsePattern);if(!a)return null;var o=v.valueCallback?v.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:h({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:h({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:h({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:h({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:h({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var p=n(946);function w(e,t){(0,r.Z)(2,arguments);var n=(0,o.Z)(e).getTime(),a=(0,p.Z)(t);return new Date(n+a)}function b(e,t){(0,r.Z)(2,arguments);var n=(0,p.Z)(t);return w(e,-n)}var S=864e5;function C(e){(0,r.Z)(1,arguments);var t=1,n=(0,o.Z)(e),a=n.getUTCDay(),i=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function k(e){(0,r.Z)(1,arguments);var t=(0,o.Z)(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var i=C(a),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var u=C(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=u.getTime()?n:n-1}function E(e){(0,r.Z)(1,arguments);var t=k(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var a=C(n);return a}var T=6048e5;function M(e,t){(0,r.Z)(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,s=null==i?0:(0,p.Z)(i),u=null==n.weekStartsOn?s:(0,p.Z)(n.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=(0,o.Z)(e),c=d.getUTCDay(),l=(c<u?7:0)+c-u;return d.setUTCDate(d.getUTCDate()-l),d.setUTCHours(0,0,0,0),d}function q(e,t){(0,r.Z)(1,arguments);var n=(0,o.Z)(e),a=n.getUTCFullYear(),i=t||{},s=i.locale,u=s&&s.options&&s.options.firstWeekContainsDate,d=null==u?1:(0,p.Z)(u),c=null==i.firstWeekContainsDate?d:(0,p.Z)(i.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(a+1,0,c),l.setUTCHours(0,0,0,0);var m=M(l,t),h=new Date(0);h.setUTCFullYear(a,0,c),h.setUTCHours(0,0,0,0);var f=M(h,t);return n.getTime()>=m.getTime()?a+1:n.getTime()>=f.getTime()?a:a-1}function D(e,t){(0,r.Z)(1,arguments);var n=t||{},a=n.locale,o=a&&a.options&&a.options.firstWeekContainsDate,i=null==o?1:(0,p.Z)(o),s=null==n.firstWeekContainsDate?i:(0,p.Z)(n.firstWeekContainsDate),u=q(e,t),d=new Date(0);d.setUTCFullYear(u,0,s),d.setUTCHours(0,0,0,0);var c=M(d,t);return c}var j=6048e5;function x(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const Z={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return x("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):x(n+1,2)},d:function(e,t){return x(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return x(e.getUTCHours()%12||12,t.length)},H:function(e,t){return x(e.getUTCHours(),t.length)},m:function(e,t){return x(e.getUTCMinutes(),t.length)},s:function(e,t){return x(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return x(Math.floor(r*Math.pow(10,n-3)),t.length)}};var L="midnight",P="noon",N="morning",U="afternoon",I="evening",W="night",Y={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return Z.y(e,t)},Y:function(e,t,n,r){var a=q(e,r),o=a>0?a:1-a;return"YY"===t?x(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):x(o,t.length)},R:function(e,t){return x(k(e),t.length)},u:function(e,t){return x(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return x(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return x(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return Z.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return x(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var i=function(e,t){(0,r.Z)(1,arguments);var n=(0,o.Z)(e),a=M(n,t).getTime()-D(n,t).getTime();return Math.round(a/j)+1}(e,a);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):x(i,t.length)},I:function(e,t,n){var a=function(e){(0,r.Z)(1,arguments);var t=(0,o.Z)(e),n=C(t).getTime()-E(t).getTime();return Math.round(n/T)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):x(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):Z.d(e,t)},D:function(e,t,n){var a=function(e){(0,r.Z)(1,arguments);var t=(0,o.Z)(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),i=n-a;return Math.floor(i/S)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):x(a,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return x(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return x(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return x(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?P:0===a?L:a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?I:a>=12?U:a>=4?N:W,t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Z.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Z.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):x(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):x(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):Z.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):Z.s(e,t)},S:function(e,t){return Z.S(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return A(a);case"XXXX":case"XX":return B(a);default:return B(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return A(a);case"xxxx":case"xx":return B(a);default:return B(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+O(a,":");default:return"GMT"+B(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+O(a,":");default:return"GMT"+B(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return x(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return x((r._originalDate||e).getTime(),t.length)}};function O(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+x(o,2)}function A(e,t){return e%60==0?(e>0?"-":"+")+x(Math.abs(e)/60,2):B(e,t)}function B(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+x(Math.floor(a/60),2)+n+x(a%60,2)}const H=Y;function F(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function z(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var G={p:z,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return F(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",F(a,t)).replace("{{time}}",z(o,t))}};const Q=G;function X(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var J=["D","DD"],R=["YY","YYYY"];function _(e){return-1!==J.indexOf(e)}function K(e){return-1!==R.indexOf(e)}function V(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var $=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ee=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,te=/^'([^]*?)'?$/,ne=/''/g,re=/[a-zA-Z]/;function ae(e,t,n){(0,r.Z)(2,arguments);var a=String(t),s=n||{},u=s.locale||y,d=u.options&&u.options.firstWeekContainsDate,c=null==d?1:(0,p.Z)(d),l=null==s.firstWeekContainsDate?c:(0,p.Z)(s.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=u.options&&u.options.weekStartsOn,h=null==m?0:(0,p.Z)(m),f=null==s.weekStartsOn?h:(0,p.Z)(s.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var g=(0,o.Z)(e);if(!i(g))throw new RangeError("Invalid time value");var v=X(g),w=b(g,v),S={firstWeekContainsDate:l,weekStartsOn:f,locale:u,_originalDate:g},C=a.match(ee).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Q[t])(e,u.formatLong,S):e})).join("").match($).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return oe(n);var a=H[r];if(a)return!s.useAdditionalWeekYearTokens&&K(n)&&V(n,t,e),!s.useAdditionalDayOfYearTokens&&_(n)&&V(n,t,e),a(w,n,u.localize,S);if(r.match(re))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return C}function oe(e){return e.match(te)[1].replace(ne,"'")}},119:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(13),a=n(882);function o(e){(0,a.Z)(1,arguments);var t=(0,r.Z)(e);return t.setHours(0,0,0,0),t}},366:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(119);function a(){return(0,r.Z)(Date.now())}},13:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(882);function a(e){(0,r.Z)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}},374:(e,t,n)=>{n.d(t,{Q0:()=>C,M5:()=>M,Yf:()=>b});var r=n(119),a=n(882);function o(e,t){(0,a.Z)(2,arguments);var n=(0,r.Z)(e),o=(0,r.Z)(t);return n.getTime()===o.getTime()}var i=n(13);var s=n(946);function u(e,t){(0,a.Z)(2,arguments);var n=(0,i.Z)(e),r=(0,s.Z)(t);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}var d=n(598),c=n(366),l=n(486),m=n.n(l),h=n(96),f=n(464),g=n(332);const v=e=>{const t=e.id,n=document.createElement("div");n.classList.add("task-item"),n.dataset.taskId=t;let r=[];["left","right"].forEach((e=>{const t=document.createElement("div");t.classList.add(e),r.push(t)}));for(let t=0;t<r.length;t++){const n=document.createElement("div");n.classList.add("details");const a=document.createElement("h2"),o=document.createElement("p");0===t?(a.textContent=e.name,o.textContent=e.description):(a.textContent=e.date?(0,d.Z)(e.date,"d MMM yyyy"):"",o.textContent=3===e.projectId?"":f.IE.findProject(e.projectId).name),n.append(a,o),r[t].append(n)}return r=((e,t)=>{for(let n=0;n<e.length;n++)if(0===n){const r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("item-check"),r.dataset.taskId=t.id,r.dataset.priority=t.priority,r.dataset.completed=t.completed,r.addEventListener("click",(()=>T(r.dataset.taskId))),e[n].insertBefore(r,e[n].firstElementChild)}else{const r=["item-edit","item-remove"],a=document.createElement("div");a.classList.add("item-buttons");for(let e=0;e<r.length;e++){const n=document.createElement("button");n.setAttribute("type","button"),n.classList.add(r[e]),n.dataset.taskId=t.id,0===e?n.addEventListener("click",(()=>(0,g.JG)(n.dataset.taskId))):n.addEventListener("click",(()=>k(n.dataset.taskId))),a.appendChild(n)}e[n].append(a)}return e})(r,e),n.append(...r),n},y=(e,t,n)=>{const r=document.querySelector("#list-title"),a=document.querySelector("#main-display"),o=document.querySelector("#pending-task-list"),i=document.querySelector("#completed-task-list");r.textContent=e,a.dataset.listId=t,(()=>{const e=document.querySelector("#pending-task-list"),t=document.querySelector("#completed-task-list");for(;e.childElementCount>0;)e.removeChild(e.firstElementChild);for(;t.childElementCount>0;)t.removeChild(t.firstElementChild)})(),n.filter((e=>!e.completed)).length<1&&(()=>{const e=document.querySelector("#pending-task-list"),t=document.createElement("div"),n=["All good!","All done!","What's the plan?","Let's get started!","Whew, no tasks!","Good to go!"],r=["illus-0","illus-1","illus-2","illus-3","illus-4"];t.classList.add("empty-splash"),t.setAttribute("id",r[Math.floor(Math.random()*r.length)]),t.textContent=n[Math.floor(Math.random()*n.length)],e.append(t)})(),n.forEach((e=>{const t=v(e);e.completed?i.insertBefore(t,i.firstElementChild):o.insertBefore(t,o.firstElementChild)})),(0,g.Z4)(),(0,h.W8)(),(0,f.vj)()},p=e=>{const t=Number(e);let n=h.B5.read();if(t<3)switch(t){case 1:n=n.filter((e=>function(e){return(0,a.Z)(1,arguments),o(e,Date.now())}(e.date)));break;case 2:n=n.filter((e=>function(e){return function(e,t){(0,a.Z)(2,arguments);var n=(0,i.Z)(e).getTime(),r=(0,i.Z)(t.start).getTime(),o=(0,i.Z)(t.end).getTime();if(!(r<=o))throw new RangeError("Invalid interval");return n>=r&&n<=o}(e.date,{start:(0,c.Z)(),end:u((0,c.Z)(),8)})}(e)))}else n=f.IE.findProject(t).taskList();return n},w=e=>{const t=Number(e),n=p(e);let r;if(t<3)switch(t){case 0:r="All";break;case 1:r="Today";break;case 2:r="Next 7 Days"}else r=f.IE.findProject(e).name;(e=>{const t=Number(e),n=document.querySelectorAll(".home-item"),r=document.querySelectorAll(".project-item");e<4?([...r].forEach((e=>e.parentElement.classList.remove("set-active"))),[...n].forEach((e=>{Number(e.dataset.sortId)===t?e.classList.add("set-active"):e.classList.remove("set-active")}))):([...n].forEach((e=>e.classList.remove("set-active"))),[...r].forEach((e=>{Number(e.dataset.projectId)===t?e.parentElement.classList.add("set-active"):e.parentElement.classList.remove("set-active")})))})(e),y(r,e,n)},b=(e=document.querySelector("#main-display").dataset.listId)=>{w(e)},S=(e,t)=>{t.querySelector(".project-left").addEventListener("click",(()=>w(e.id)));t.querySelector(".project-remove").addEventListener("click",(()=>function(e){const t=Number(e.dataset.projectId);let n=Number(document.querySelector("#main-display").dataset.listId);f.IE.findProject(t).taskList().forEach((e=>h.B5.remove(e.id))),f.IE.remove(t),e.parentElement.remove(),n>t?(n-=1,w(n)):n===t?w(3):b();(e=>{const t=document.querySelector("#rename-project-form"),{renameId:n}=t.dataset;"null"!==n&&Number(n)>e&&(t.dataset.renameId-=1);[...document.querySelectorAll("[data-project-id]")].forEach((t=>{Number(t.dataset.projectId)>e&&(t.dataset.projectId-=1)})),(0,g.tl)(),(0,g.Z4)(),(0,h.W8)(),(0,f.vj)()})(t),(0,g.SC)("edit-task-menu")}(t)));return t.querySelector(".project-edit").addEventListener("click",(()=>(0,g.GY)(e.id,t))),t},C=e=>{const t=document.querySelector("#project-list"),n=(e=>{const t=e.id,n=document.createElement("div");n.classList.add("display-wrapper");let r=document.createElement("div");r.classList.add("project-item"),r.dataset.projectId=t;const a=document.createElement("div");a.classList.add("project-left");const o=document.createElement("div");o.classList.add("nav-icon","project-icon");const i=document.createElement("span");i.textContent=e.name,a.append(o,i);const s=document.createElement("div");s.classList.add("project-buttons");const u=["project-edit","project-remove"];for(let e=0;e<u.length;e++){const n=document.createElement("button");n.classList.add(u[e]),n.dataset.projectId=t,s.appendChild(n)}return r.append(a,s),r=S(e,r),n.appendChild(r),n})(e);t.appendChild(n),(0,g.tl)(),(0,g.Z4)(),(0,h.W8)(),(0,f.vj)()};function k(e){(0,g.eu)(e),h.B5.remove(e),b()}function E(){const e=document.querySelector("#main-display").dataset.listId;p(e).filter((e=>!0===e.completed)).forEach((e=>k(e.id)))}function T(e){h.B5.findTask(e).toggleStatus(),b()}function M(){(0,h.Ny)(),(0,f.Pw)(),m().drop(f.IE.read(),1).forEach((e=>C(e))),(0,g.x9)(),document.querySelectorAll(".home-item").forEach((e=>{e.addEventListener("click",(()=>w(e.dataset.sortId)))})),document.querySelector("#remove-completed").addEventListener("click",E),window.addEventListener("load",(()=>w(3)))}},332:(e,t,n)=>{n.d(t,{GY:()=>f,JG:()=>m,SC:()=>v,Tf:()=>h,Z4:()=>d,eu:()=>g,nF:()=>l,tl:()=>u,x9:()=>p});var r=n(598),a=n(366),o=n(96),i=n(464);const s=e=>{const t=document.querySelector("#menus");t.insertBefore(e,t.firstElementChild)},u=()=>{document.querySelector("#menus").querySelectorAll("form").forEach((e=>{const t=e.querySelector("select");for(;t.childElementCount>0;)t.removeChild(t.firstElementChild);i.IE.read().forEach((e=>{const n=document.createElement("option");n.textContent=e.name,n.value=e.id,t.appendChild(n)}))}))},d=()=>{const e=Number(document.querySelector("#main-display").dataset.listId);document.querySelector("#add-task-form").querySelector("select").value=e>3?e:3},c=e=>{const t=e.querySelector('input[name="name"]'),n=e.querySelector(".submit");t.validity.valid?n.removeAttribute("disabled"):n.setAttribute("disabled"," ")},l=()=>{const e=document.querySelector("#main-display").dataset.listId,t=document.querySelector("#add-task-menu"),n=t.querySelector("form"),o=n.querySelector('input[type="date"]');n.reset(),t.classList.remove("display-none"),1===Number(e)&&(o.value=(0,r.Z)((0,a.Z)(),"yyyy-MM-dd")),d(),s(t),c(n)},m=e=>{const t=document.querySelector("#edit-task-menu"),n=t.querySelector("form");n.dataset.taskId=e,t.classList.contains("display-none")&&t.classList.remove("display-none"),(e=>{const t=document.querySelector("#edit-task-form"),n=t.querySelector("#task-name-edit"),a=t.querySelector("#task-description-edit"),i=t.querySelector("#task-date-edit"),s=t.querySelector("#project-edit"),u=t.querySelectorAll("input[name=priority-edit]"),d=o.B5.findTask(e);n.value=d.name,a.value=d.description,i.value=d.date?(0,r.Z)(d.date,"yyyy-MM-dd"):"",s.value=d.projectId,u.forEach((e=>{e.value===d.priority?e.setAttribute("checked",""):e.removeAttribute("checked")}))})(e),s(t),c(n)},h=()=>{const e=document.querySelector("#add-project-menu"),t=e.querySelector("form");e.classList.remove("display-none"),c(t)},f=(e,t)=>{const n=document.querySelector("#rename-project-menu"),r=document.querySelector("#rename-project-form"),a=r.querySelector('input[name="name"]'),o=document.querySelector("#project-list"),s=t.parentElement;"null"!==r.dataset.projectId&&v("rename-project-menu"),r.dataset.renameId=e,a.value=i.IE.findProject(e).name,o.insertBefore(n,s),s.classList.add("display-none"),n.classList.remove("display-none"),c(r)},g=e=>{const t=document.querySelector("#edit-task-form");if(![e,t.dataset.taskId].includes("null")){Number(e)===Number(t.dataset.taskId)&&v(t.parentElement.getAttribute("id"))}};function v(e){let t;switch(e){case"add-task-menu":t=document.querySelector("#add-task-menu");break;case"edit-task-menu":t=document.querySelector("#edit-task-menu"),t.firstElementChild.dataset.taskId=null;break;case"add-project-menu":t=document.querySelector("#add-project-menu");break;case"rename-project-menu":t=document.querySelector("#rename-project-menu"),(e=>{const t=document.querySelector("#project-list"),n=e;e.firstElementChild.dataset.renameId=null,n.nextElementSibling.classList.remove("display-none"),t.insertBefore(n,t.firstElementChild)})(t)}t.querySelector("form").reset(),t.classList.add("display-none")}const y=()=>{document.querySelectorAll("form").forEach((e=>{e.addEventListener("input",(()=>c(e))),e.addEventListener("submit",(e=>e.preventDefault()))})),(()=>{const e=document.querySelectorAll("input[type=date]"),t=(0,r.Z)(new Date,"yyyy-MM-dd");e.forEach((e=>e.setAttribute("min",t)))})(),u()},p=()=>{document.querySelectorAll(".cancel").forEach((e=>e.addEventListener("click",(e=>{v(e.target.dataset.menu)})))),y()}},464:(e,t,n)=>{n.d(t,{IE:()=>s,IK:()=>i,Pw:()=>d,vj:()=>u});var r=n(486),a=n.n(r),o=n(96);class i{constructor(e,t){this.id=e,this.name=t}taskList(){return o.B5.findProject(this.id)}}const s=(()=>{const e=[],t=t=>{const n=Number(t);return e.find((e=>e.id===n))};return{push:t=>e.push(t),read:()=>e,findProject:t,remove:n=>{const r=Number(n);a().remove(e,t(n)),e.forEach((e=>{e.id>r&&(e.taskList().forEach((e=>{e.projectId-=1})),e.id-=1)}))}}})(),u=()=>{localStorage.setItem("projectList",JSON.stringify(s.read()))};function d(){if("projectList"in localStorage){let e=JSON.parse(localStorage.getItem("projectList"));e=a().drop(e,1),e.forEach((e=>{s.push(new i(...Object.values(e)))}))}}},96:(e,t,n)=>{n.d(t,{iQ:()=>s,Ny:()=>c,W8:()=>d,B5:()=>u});var r=n(486),a=n.n(r),o=n(13),i=n(882);class s{constructor(e,t,n,r,a,o,i=!1){this.id=e,this.name=t,this.description=n,this.date=r,this.projectId=a,this.priority=o,this.completed=i}toggleStatus(){this.completed=!this.completed}}const u=(()=>{const e=[],t=t=>{const n=Number(t);return e.find((e=>e.id===n))};return{push:t=>e.push(t),read:()=>e,findTask:t,findProject:t=>{const n=Number(t);return e.filter((e=>e.projectId===n))},remove:n=>{const r=Number(n);a().remove(e,t(r)),e.forEach((e=>{e.id>r&&(e.id-=1)}))}}})();function d(){localStorage.setItem("taskList",JSON.stringify(u.read()))}function c(){if("taskList"in localStorage){JSON.parse(localStorage.getItem("taskList")).forEach((e=>{e.date=e.date?function(e){if((0,i.Z)(1,arguments),"string"==typeof e){var t=e.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return t?new Date(Date.UTC(+t[1],+t[2]-1,+t[3],+t[4]-(+t[9]||0)*("-"==t[8]?-1:1),+t[5]-(+t[10]||0)*("-"==t[8]?-1:1),+t[6],+((t[7]||"0")+"00").substring(0,3))):new Date(NaN)}return(0,o.Z)(e)}(e.date):null,u.push(new s(...Object.values(e)))}))}}}},e=>{var t;t=374,e(e.s=t)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEtBQU8sTUFBTXJNLFVBQVUsRUFBRyxLQUdwTyxJQUFJcFIsS0FBS1YsS0FHbEIsT0FBTyxFQUFBa0IsRUFBQSxHQUFPd1IsR0RnRWMwTCxDQUFVNUssRUFBS3ZTLE1BQVEsS0FDL0M4YyxFQUFXMUosS0FBSyxJQUFJeUosS0FBUW5kLE9BQU9nRSxPQUFPNk8sWSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mVG9kYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1NhbWVEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGREYXlzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2Rpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1RvZGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNXaXRoaW5JbnRlcnZhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9mb3JtLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvcHJvamVjdHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvdGFza3MuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9wYXJzZUpTT04vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBOb3cgYGlzVmFsaWRgIGRvZXNuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gKiAgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqICAgSW5zdGVhZCwgYXJndW1lbnQgaXMgY29udmVydGVkIGJlZm9yZWhhbmQgdXNpbmcgYHRvRGF0ZWAuXG4gKlxuICogICBFeGFtcGxlczpcbiAqXG4gKiAgIHwgYGlzVmFsaWRgIGFyZ3VtZW50ICAgICAgICB8IEJlZm9yZSB2Mi4wLjAgfCB2Mi4wLjAgb253YXJkIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGBuZXcgRGF0ZSgpYCAgICAgICAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcyMDE2LTAxLTAxJylgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJycpYCAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgxNDg4MzcwODM1MDgxKWAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKE5hTilgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJzIwMTYtMDEtMDEnYCAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnJ2AgICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYDE0ODgzNzA4MzUwODFgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgTmFOYCAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICpcbiAqICAgV2UgaW50cm9kdWNlIHRoaXMgY2hhbmdlIHRvIG1ha2UgKmRhdGUtZm5zKiBjb25zaXN0ZW50IHdpdGggRUNNQVNjcmlwdCBiZWhhdmlvclxuICogICB0aGF0IHRyeSB0byBjb2VyY2UgYXJndW1lbnRzIHRvIHRoZSBleHBlY3RlZCB0eXBlXG4gKiAgICh3aGljaCBpcyBhbHNvIHRoZSBjYXNlIHdpdGggb3RoZXIgKmRhdGUtZm5zKiBmdW5jdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uICh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uICh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgIHZhciBtYXRjaFBhdHRlcm4gPSB3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MubWF0Y2hQYXR0ZXJuc1thcmdzLmRlZmF1bHRNYXRjaFdpZHRoXTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gobWF0Y2hQYXR0ZXJuKTtcblxuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUGF0dGVybnMgPSB3aWR0aCAmJiBhcmdzLnBhcnNlUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcbiAgICB2YXIga2V5ID0gQXJyYXkuaXNBcnJheShwYXJzZVBhdHRlcm5zKSA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KSA6IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gXCIuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIjtcbmltcG9ydCBsb2NhbGl6ZSBmcm9tIFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4vX2xpYi9tYXRjaC9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTsgLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xuXG52YXIgb3JkaW5hbE51bWJlciA9IGZ1bmN0aW9uIChkaXJ0eU51bWJlciwgX29wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcblxuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufTtcblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NTozMC43NTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgZGlydHlPcHRpb25zKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcblxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuXG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcblxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufVxuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfVxufSIsImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIHNlY29uZCBhcmd1bWVudCBpcyBub3cgcmVxdWlyZWQgZm9yIHRoZSBzYWtlIG9mIGV4cGxpY2l0bmVzcy5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSkpXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSwgXCJ5eXl5LU1NLWRkJ1QnSEg6bW06c3MuU1NTeHh4XCIpXG4gKiAgIGBgYFxuICpcbiAqIC0gTmV3IGZvcm1hdCBzdHJpbmcgQVBJIGZvciBgZm9ybWF0YCBmdW5jdGlvblxuICogICB3aGljaCBpcyBiYXNlZCBvbiBbVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1XShodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlKS5cbiAqICAgU2VlIFt0aGlzIHBvc3RdKGh0dHBzOi8vYmxvZy5kYXRlLWZucy5vcmcvcG9zdC91bmljb2RlLXRva2Vucy1pbi1kYXRlLWZucy12Mi1zcmVhdHlraTkxamcpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogLSBDaGFyYWN0ZXJzIGFyZSBub3cgZXNjYXBlZCB1c2luZyBzaW5nbGUgcXVvdGUgc3ltYm9scyAoYCdgKSBpbnN0ZWFkIG9mIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZm9ybWF0U3RyID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Zvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgJyArIGZpcnN0Q2hhcmFjdGVyICsgJ2AnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKVsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHN0YXJ0T2ZEYXkgZnJvbSBcIi4uL3N0YXJ0T2ZEYXkvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZlRvZGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgdG9kYXkuXG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiB0b2RheS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIHRvZGF5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0OlxuICogdmFyIHJlc3VsdCA9IHN0YXJ0T2ZUb2RheSgpXG4gKiAvLz0+IE1vbiBPY3QgNiAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlRvZGF5KCkge1xuICByZXR1cm4gc3RhcnRPZkRheShEYXRlLm5vdygpKTtcbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgc3RhcnRPZkRheSBmcm9tIFwiLi4vc3RhcnRPZkRheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNTYW1lRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgMDY6MDA6MDAgYW5kIDQgU2VwdGVtYmVyIDE4OjAwOjAwIGluIHRoZSBzYW1lIGRheT9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCwgNiwgMCksIG5ldyBEYXRlKDIwMTQsIDgsIDQsIDE4LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICogXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIGFuZCA0IE9jdG9iZXIgaW4gdGhlIHNhbWUgZGF5P1xuICogdmFyIHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNCwgOSwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKiBcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIsIDIwMTQgYW5kIDQgU2VwdGVtYmVyLCAyMDE1IGluIHRoZSBzYW1lIGRheT9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTUsIDgsIDQpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2FtZURheShkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHRTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodCk7XG4gIHJldHVybiBkYXRlTGVmdFN0YXJ0T2ZEYXkuZ2V0VGltZSgpID09PSBkYXRlUmlnaHRTdGFydE9mRGF5LmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGREYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgZGF5cyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IC0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gLSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgMTAgZGF5cyB0byAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gYWRkRGF5cyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMTApXG4gKiAvLz0+IFRodSBTZXAgMTEgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZERheXMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG5cbiAgaWYgKGlzTmFOKGFtb3VudCkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBkYXlzLCBuby1vcCB0byBhdm9pZCBjaGFuZ2luZyB0aW1lcyBpbiB0aGUgaG91ciBiZWZvcmUgZW5kIG9mIERTVFxuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHtcbiAgZm9ybWF0LFxuICBpc1dpdGhpbkludGVydmFsLFxuICBpc1RvZGF5LFxuICBhZGREYXlzLFxuICBzdGFydE9mVG9kYXksXG59IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB0YXNrTWFzdGVyLCBzdG9yZVRhc2tMaXN0LCBpbml0aWFsaXplVGFza3MgfSBmcm9tICcuL3Rhc2tzJztcbmltcG9ydCB7XG4gIHByb2plY3RNYXN0ZXIsXG4gIHN0b3JlUHJvamVjdExpc3QsXG4gIGluaXRpYWxpemVQcm9qZWN0cyxcbn0gZnJvbSAnLi9wcm9qZWN0cyc7XG5pbXBvcnQge1xuICBpbml0aWFsaXplRm9ybUNvbnRyb2xsZXIsXG4gIHNob3dFZGl0LFxuICBzaG93UmVuYW1lLFxuICB1cGRhdGVTZWxlY3RPcHRpb25zLFxuICB1cGRhdGVTZWxlY3RWYWx1ZXMsXG4gIHNxdWFzaEVkaXQsXG4gIGhpZGVNZW51LFxufSBmcm9tICcuL2Zvcm0tY29udHJvbGxlcic7XG5cbmNvbnN0IGdlbmVyYXRlVGFza0V2ZW50cyA9IChlbGVtZW50cywgdGFzaykgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIC8vIGxlZnRcbiAgICAgIGNvbnN0IGNoZWNrQ2lyY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBjaGVja0NpcmNsZS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gICAgICBjaGVja0NpcmNsZS5jbGFzc0xpc3QuYWRkKCdpdGVtLWNoZWNrJyk7XG4gICAgICBjaGVja0NpcmNsZS5kYXRhc2V0LnRhc2tJZCA9IHRhc2suaWQ7XG4gICAgICBjaGVja0NpcmNsZS5kYXRhc2V0LnByaW9yaXR5ID0gdGFzay5wcmlvcml0eTtcbiAgICAgIGNoZWNrQ2lyY2xlLmRhdGFzZXQuY29tcGxldGVkID0gdGFzay5jb21wbGV0ZWQ7XG4gICAgICBjaGVja0NpcmNsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+XG4gICAgICAgIGNvbXBsZXRlVGFzayhjaGVja0NpcmNsZS5kYXRhc2V0LnRhc2tJZClcbiAgICAgICk7XG4gICAgICBlbGVtZW50c1tpXS5pbnNlcnRCZWZvcmUoY2hlY2tDaXJjbGUsIGVsZW1lbnRzW2ldLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmlnaHRcbiAgICAgIGNvbnN0IHJpZ2h0U2lkZUJ0bnMgPSBbJ2l0ZW0tZWRpdCcsICdpdGVtLXJlbW92ZSddO1xuICAgICAgY29uc3QgaXRlbUJ1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGl0ZW1CdXR0b25zLmNsYXNzTGlzdC5hZGQoJ2l0ZW0tYnV0dG9ucycpO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByaWdodFNpZGVCdG5zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChyaWdodFNpZGVCdG5zW2pdKTtcbiAgICAgICAgYnV0dG9uLmRhdGFzZXQudGFza0lkID0gdGFzay5pZDtcbiAgICAgICAgaWYgKGogPT09IDApIHtcbiAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PlxuICAgICAgICAgICAgc2hvd0VkaXQoYnV0dG9uLmRhdGFzZXQudGFza0lkKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT5cbiAgICAgICAgICAgIHJlbW92ZVRhc2soYnV0dG9uLmRhdGFzZXQudGFza0lkKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbUJ1dHRvbnMuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnRzW2ldLmFwcGVuZChpdGVtQnV0dG9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRzO1xufTtcblxuY29uc3QgY3JlYXRlVGFza0l0ZW0gPSAodGFzaykgPT4ge1xuICBjb25zdCB0YXNrSWQgPSB0YXNrLmlkO1xuICBjb25zdCB0YXNrSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0YXNrSXRlbS5jbGFzc0xpc3QuYWRkKCd0YXNrLWl0ZW0nKTtcbiAgdGFza0l0ZW0uZGF0YXNldC50YXNrSWQgPSB0YXNrSWQ7XG5cbiAgY29uc3Qgc2VjdGlvbnMgPSBbJ2xlZnQnLCAncmlnaHQnXTtcbiAgbGV0IGVsZW1lbnRzID0gW107XG4gIHNlY3Rpb25zLmZvckVhY2goKHNlY3Rpb24pID0+IHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZChzZWN0aW9uKTtcbiAgICBlbGVtZW50cy5wdXNoKGRpdik7XG4gIH0pO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkZXRhaWxzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGV0YWlscy5jbGFzc0xpc3QuYWRkKCdkZXRhaWxzJyk7XG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICBjb25zdCBwYXJhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIGhlYWRlci50ZXh0Q29udGVudCA9IHRhc2submFtZTtcbiAgICAgIHBhcmEudGV4dENvbnRlbnQgPSB0YXNrLmRlc2NyaXB0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIudGV4dENvbnRlbnQgPSB0YXNrLmRhdGUgPyBmb3JtYXQodGFzay5kYXRlLCAnZCBNTU0geXl5eScpIDogJyc7XG4gICAgICBwYXJhLnRleHRDb250ZW50ID1cbiAgICAgICAgdGFzay5wcm9qZWN0SWQgPT09IDNcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiBwcm9qZWN0TWFzdGVyLmZpbmRQcm9qZWN0KHRhc2sucHJvamVjdElkKS5uYW1lO1xuICAgIH1cbiAgICBkZXRhaWxzLmFwcGVuZChoZWFkZXIsIHBhcmEpO1xuICAgIGVsZW1lbnRzW2ldLmFwcGVuZChkZXRhaWxzKTtcbiAgfVxuXG4gIGVsZW1lbnRzID0gZ2VuZXJhdGVUYXNrRXZlbnRzKGVsZW1lbnRzLCB0YXNrKTtcbiAgdGFza0l0ZW0uYXBwZW5kKC4uLmVsZW1lbnRzKTtcblxuICByZXR1cm4gdGFza0l0ZW07XG59O1xuXG5jb25zdCBzZXRBY3RpdmUgPSAoaWQpID0+IHtcbiAgY29uc3QgaWROdW0gPSBOdW1iZXIoaWQpO1xuICBjb25zdCBob21lSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaG9tZS1pdGVtJyk7XG4gIGNvbnN0IHByb2plY3RJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0LWl0ZW0nKTtcblxuICBpZiAoaWQgPCA0KSB7XG4gICAgWy4uLnByb2plY3RJdGVtc10uZm9yRWFjaCgocEkpID0+XG4gICAgICBwSS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NldC1hY3RpdmUnKVxuICAgICk7XG4gICAgWy4uLmhvbWVJdGVtc10uZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgaWYgKE51bWJlcihpLmRhdGFzZXQuc29ydElkKSA9PT0gaWROdW0pIHtcbiAgICAgICAgaS5jbGFzc0xpc3QuYWRkKCdzZXQtYWN0aXZlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpLmNsYXNzTGlzdC5yZW1vdmUoJ3NldC1hY3RpdmUnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBbLi4uaG9tZUl0ZW1zXS5mb3JFYWNoKChpKSA9PiBpLmNsYXNzTGlzdC5yZW1vdmUoJ3NldC1hY3RpdmUnKSk7XG4gICAgWy4uLnByb2plY3RJdGVtc10uZm9yRWFjaCgocEkpID0+IHtcbiAgICAgIGlmIChOdW1iZXIocEkuZGF0YXNldC5wcm9qZWN0SWQpID09PSBpZE51bSkge1xuICAgICAgICBwSS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NldC1hY3RpdmUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBJLnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2V0LWFjdGl2ZScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5jb25zdCBnZW5lcmF0ZUVtcHR5U3BsYXNoID0gKCkgPT4ge1xuICBjb25zdCBwZW5kaW5nVGFza0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGVuZGluZy10YXNrLWxpc3QnKTtcbiAgY29uc3QgZW1wdHlTcGxhc2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgdGV4dCA9IFtcbiAgICAnQWxsIGdvb2QhJyxcbiAgICAnQWxsIGRvbmUhJyxcbiAgICBcIldoYXQncyB0aGUgcGxhbj9cIixcbiAgICBcIkxldCdzIGdldCBzdGFydGVkIVwiLFxuICAgICdXaGV3LCBubyB0YXNrcyEnLFxuICAgICdHb29kIHRvIGdvIScsXG4gIF07XG4gIGNvbnN0IGlsbHVzID0gWydpbGx1cy0wJywgJ2lsbHVzLTEnLCAnaWxsdXMtMicsICdpbGx1cy0zJywgJ2lsbHVzLTQnXTtcbiAgZW1wdHlTcGxhc2guY2xhc3NMaXN0LmFkZCgnZW1wdHktc3BsYXNoJyk7XG4gIGVtcHR5U3BsYXNoLnNldEF0dHJpYnV0ZShcbiAgICAnaWQnLFxuICAgIGlsbHVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGlsbHVzLmxlbmd0aCldXG4gICk7XG4gIGVtcHR5U3BsYXNoLnRleHRDb250ZW50ID0gdGV4dFtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0ZXh0Lmxlbmd0aCldO1xuICBwZW5kaW5nVGFza0xpc3QuYXBwZW5kKGVtcHR5U3BsYXNoKTtcbn07XG5cbmNvbnN0IGNsZWFyVGFza0xpc3QgPSAoKSA9PiB7XG4gIGNvbnN0IHBlbmRpbmdUYXNrTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwZW5kaW5nLXRhc2stbGlzdCcpO1xuICBjb25zdCBjb21wbGV0ZWRUYXNrTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wbGV0ZWQtdGFzay1saXN0Jyk7XG4gIHdoaWxlIChwZW5kaW5nVGFza0xpc3QuY2hpbGRFbGVtZW50Q291bnQgPiAwKSB7XG4gICAgcGVuZGluZ1Rhc2tMaXN0LnJlbW92ZUNoaWxkKHBlbmRpbmdUYXNrTGlzdC5maXJzdEVsZW1lbnRDaGlsZCk7XG4gIH1cbiAgd2hpbGUgKGNvbXBsZXRlZFRhc2tMaXN0LmNoaWxkRWxlbWVudENvdW50ID4gMCkge1xuICAgIGNvbXBsZXRlZFRhc2tMaXN0LnJlbW92ZUNoaWxkKGNvbXBsZXRlZFRhc2tMaXN0LmZpcnN0RWxlbWVudENoaWxkKTtcbiAgfVxufTtcblxuY29uc3QgcmVuZGVyVGFza0xpc3QgPSAobGlzdE5hbWUsIGxpc3RJZCwgdGFza0xpc3QpID0+IHtcbiAgY29uc3QgbGlzdFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3QtdGl0bGUnKTtcbiAgY29uc3QgbWFpbkRpc3BsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbi1kaXNwbGF5Jyk7XG4gIGNvbnN0IHBlbmRpbmdUYXNrTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwZW5kaW5nLXRhc2stbGlzdCcpO1xuICBjb25zdCBjb21wbGV0ZWRUYXNrTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wbGV0ZWQtdGFzay1saXN0Jyk7XG5cbiAgbGlzdFRpdGxlLnRleHRDb250ZW50ID0gbGlzdE5hbWU7XG4gIG1haW5EaXNwbGF5LmRhdGFzZXQubGlzdElkID0gbGlzdElkO1xuXG4gIGNsZWFyVGFza0xpc3QoKTtcblxuICBpZiAodGFza0xpc3QuZmlsdGVyKCh0YXNrKSA9PiAhdGFzay5jb21wbGV0ZWQpLmxlbmd0aCA8IDEpIHtcbiAgICBnZW5lcmF0ZUVtcHR5U3BsYXNoKCk7XG4gIH1cbiAgdGFza0xpc3QuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgIGNvbnN0IGxpc3RJdGVtID0gY3JlYXRlVGFza0l0ZW0odGFzayk7XG4gICAgaWYgKHRhc2suY29tcGxldGVkKSB7XG4gICAgICBjb21wbGV0ZWRUYXNrTGlzdC5pbnNlcnRCZWZvcmUoXG4gICAgICAgIGxpc3RJdGVtLFxuICAgICAgICBjb21wbGV0ZWRUYXNrTGlzdC5maXJzdEVsZW1lbnRDaGlsZFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ1Rhc2tMaXN0Lmluc2VydEJlZm9yZShsaXN0SXRlbSwgcGVuZGluZ1Rhc2tMaXN0LmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICB9XG4gIH0pO1xuICB1cGRhdGVTZWxlY3RWYWx1ZXMoKTtcbiAgc3RvcmVUYXNrTGlzdCgpO1xuICBzdG9yZVByb2plY3RMaXN0KCk7XG59O1xuXG5jb25zdCBmaW5kTGlzdCA9IChsaXN0SWQpID0+IHtcbiAgY29uc3QgaWROdW0gPSBOdW1iZXIobGlzdElkKTtcbiAgbGV0IHRhc2tMaXN0ID0gdGFza01hc3Rlci5yZWFkKCk7XG4gIGlmIChpZE51bSA8IDMpIHtcbiAgICBzd2l0Y2ggKGlkTnVtKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHRhc2tMaXN0ID0gdGFza0xpc3QuZmlsdGVyKCh0YXNrKSA9PiBpc1RvZGF5KHRhc2suZGF0ZSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdGFza0xpc3QgPSB0YXNrTGlzdC5maWx0ZXIoKHRhc2spID0+IGlzV2l0aGluV2Vlayh0YXNrKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gTm8gZGVmYXVsdFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YXNrTGlzdCA9IHByb2plY3RNYXN0ZXIuZmluZFByb2plY3QoaWROdW0pLnRhc2tMaXN0KCk7XG4gIH1cbiAgcmV0dXJuIHRhc2tMaXN0O1xufTtcblxuY29uc3Qgb3Blbkxpc3QgPSAoaWQpID0+IHtcbiAgY29uc3QgaWROdW0gPSBOdW1iZXIoaWQpO1xuICBjb25zdCB0YXNrTGlzdCA9IGZpbmRMaXN0KGlkKTtcbiAgbGV0IGxpc3ROYW1lO1xuICBpZiAoaWROdW0gPCAzKSB7XG4gICAgc3dpdGNoIChpZE51bSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBsaXN0TmFtZSA9ICdBbGwnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbGlzdE5hbWUgPSAnVG9kYXknO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgbGlzdE5hbWUgPSAnTmV4dCA3IERheXMnO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIE5vIGRlZmF1bHRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGlzdE5hbWUgPSBwcm9qZWN0TWFzdGVyLmZpbmRQcm9qZWN0KGlkKS5uYW1lO1xuICB9XG4gIHNldEFjdGl2ZShpZCk7XG4gIHJlbmRlclRhc2tMaXN0KGxpc3ROYW1lLCBpZCwgdGFza0xpc3QpO1xufTtcblxuY29uc3QgcmVsb2FkTGlzdCA9IChcbiAgaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbi1kaXNwbGF5JykuZGF0YXNldC5saXN0SWRcbikgPT4ge1xuICBvcGVuTGlzdChpZCk7XG59O1xuXG5jb25zdCBnZW5lcmF0ZVByb2plY3RFdmVudHMgPSAocHJvamVjdCwgcHJvamVjdEl0ZW0pID0+IHtcbiAgY29uc3QgcHJvamVjdExlZnQgPSBwcm9qZWN0SXRlbS5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1sZWZ0Jyk7XG4gIHByb2plY3RMZWZ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gb3Blbkxpc3QocHJvamVjdC5pZCkpO1xuXG4gIGNvbnN0IHByb2plY3RSZW1vdmUgPSBwcm9qZWN0SXRlbS5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1yZW1vdmUnKTtcbiAgcHJvamVjdFJlbW92ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHJlbW92ZVByb2plY3QocHJvamVjdEl0ZW0pKTtcblxuICBjb25zdCBwcm9qZWN0RWRpdCA9IHByb2plY3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWVkaXQnKTtcbiAgcHJvamVjdEVkaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PlxuICAgIHNob3dSZW5hbWUocHJvamVjdC5pZCwgcHJvamVjdEl0ZW0pXG4gICk7XG5cbiAgcmV0dXJuIHByb2plY3RJdGVtO1xufTtcblxuY29uc3QgY3JlYXRlUHJvamVjdEl0ZW0gPSAocHJvamVjdCkgPT4ge1xuICBjb25zdCBwcm9qZWN0SWQgPSBwcm9qZWN0LmlkO1xuICBjb25zdCBkaXNwbGF5V3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXNwbGF5V3JhcHBlci5jbGFzc0xpc3QuYWRkKCdkaXNwbGF5LXdyYXBwZXInKTtcbiAgbGV0IHByb2plY3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHByb2plY3RJdGVtLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtaXRlbScpO1xuICBwcm9qZWN0SXRlbS5kYXRhc2V0LnByb2plY3RJZCA9IHByb2plY3RJZDtcblxuICBjb25zdCBwcm9qZWN0TGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwcm9qZWN0TGVmdC5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWxlZnQnKTtcbiAgY29uc3QgbmF2SWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBuYXZJY29uLmNsYXNzTGlzdC5hZGQoJ25hdi1pY29uJywgJ3Byb2plY3QtaWNvbicpO1xuICBjb25zdCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgcHJvamVjdE5hbWUudGV4dENvbnRlbnQgPSBwcm9qZWN0Lm5hbWU7XG4gIHByb2plY3RMZWZ0LmFwcGVuZChuYXZJY29uLCBwcm9qZWN0TmFtZSk7XG5cbiAgY29uc3QgcHJvamVjdEJ1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcHJvamVjdEJ1dHRvbnMuY2xhc3NMaXN0LmFkZCgncHJvamVjdC1idXR0b25zJyk7XG4gIGNvbnN0IGJ1dHRvbnMgPSBbJ3Byb2plY3QtZWRpdCcsICdwcm9qZWN0LXJlbW92ZSddO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZChidXR0b25zW2ldKTtcbiAgICBidXR0b24uZGF0YXNldC5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XG4gICAgcHJvamVjdEJ1dHRvbnMuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgfVxuXG4gIHByb2plY3RJdGVtLmFwcGVuZChwcm9qZWN0TGVmdCwgcHJvamVjdEJ1dHRvbnMpO1xuICBwcm9qZWN0SXRlbSA9IGdlbmVyYXRlUHJvamVjdEV2ZW50cyhwcm9qZWN0LCBwcm9qZWN0SXRlbSk7XG4gIGRpc3BsYXlXcmFwcGVyLmFwcGVuZENoaWxkKHByb2plY3RJdGVtKTtcblxuICByZXR1cm4gZGlzcGxheVdyYXBwZXI7XG59O1xuXG5jb25zdCBhZGRQcm9qZWN0VG9MaXN0ID0gKHByb2plY3QpID0+IHtcbiAgY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdC1saXN0Jyk7XG4gIGNvbnN0IHByb2plY3RJdGVtID0gY3JlYXRlUHJvamVjdEl0ZW0ocHJvamVjdCk7XG4gIHByb2plY3RMaXN0LmFwcGVuZENoaWxkKHByb2plY3RJdGVtKTtcbiAgdXBkYXRlU2VsZWN0T3B0aW9ucygpO1xuICB1cGRhdGVTZWxlY3RWYWx1ZXMoKTtcbiAgc3RvcmVUYXNrTGlzdCgpO1xuICBzdG9yZVByb2plY3RMaXN0KCk7XG59O1xuXG5jb25zdCB1cGRhdGVQcm9qZWN0TGlzdCA9IChpZCkgPT4ge1xuICBjb25zdCByZW5hbWVQcm9qZWN0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZW5hbWUtcHJvamVjdC1mb3JtJyk7XG4gIGNvbnN0IHsgcmVuYW1lSWQgfSA9IHJlbmFtZVByb2plY3RGb3JtLmRhdGFzZXQ7XG4gIGlmIChyZW5hbWVJZCAhPT0gJ251bGwnICYmIE51bWJlcihyZW5hbWVJZCkgPiBpZCkge1xuICAgIHJlbmFtZVByb2plY3RGb3JtLmRhdGFzZXQucmVuYW1lSWQgLT0gMTtcbiAgfVxuICBjb25zdCBwcm9qZWN0RWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1wcm9qZWN0LWlkXScpO1xuICBbLi4ucHJvamVjdEVsZW1lbnRzXS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgaWYgKE51bWJlcihlbGVtZW50LmRhdGFzZXQucHJvamVjdElkKSA+IGlkKSB7XG4gICAgICBlbGVtZW50LmRhdGFzZXQucHJvamVjdElkIC09IDE7XG4gICAgfVxuICB9KTtcbiAgdXBkYXRlU2VsZWN0T3B0aW9ucygpO1xuICB1cGRhdGVTZWxlY3RWYWx1ZXMoKTtcbiAgc3RvcmVUYXNrTGlzdCgpO1xuICBzdG9yZVByb2plY3RMaXN0KCk7XG59O1xuXG5mdW5jdGlvbiByZW1vdmVQcm9qZWN0KHByb2plY3RJdGVtKSB7XG4gIGNvbnN0IHByb2plY3RJZCA9IE51bWJlcihwcm9qZWN0SXRlbS5kYXRhc2V0LnByb2plY3RJZCk7XG4gIGxldCBsaXN0SWQgPSBOdW1iZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21haW4tZGlzcGxheScpLmRhdGFzZXQubGlzdElkKTtcbiAgLy8gQWxzbyByZW1vdmVzIHRhc2tzIHRoYXQgYmVsb25nIHRvIHByb2plY3QgdG8gYmUgcmVtb3ZlZFxuICBjb25zdCBleGlzdGluZ1Rhc2tzID0gcHJvamVjdE1hc3Rlci5maW5kUHJvamVjdChwcm9qZWN0SWQpLnRhc2tMaXN0KCk7XG4gIGV4aXN0aW5nVGFza3MuZm9yRWFjaCgodGFzaykgPT4gdGFza01hc3Rlci5yZW1vdmUodGFzay5pZCkpO1xuICBwcm9qZWN0TWFzdGVyLnJlbW92ZShwcm9qZWN0SWQpO1xuICBwcm9qZWN0SXRlbS5wYXJlbnRFbGVtZW50LnJlbW92ZSgpO1xuXG4gIGlmIChsaXN0SWQgPiBwcm9qZWN0SWQpIHtcbiAgICBsaXN0SWQgLT0gMTtcbiAgICBvcGVuTGlzdChsaXN0SWQpO1xuICB9IGVsc2UgaWYgKGxpc3RJZCA9PT0gcHJvamVjdElkKSB7XG4gICAgLy8gT3BlbnMgaW5ib3hcbiAgICBvcGVuTGlzdCgzKTtcbiAgfSBlbHNlIHtcbiAgICByZWxvYWRMaXN0KCk7XG4gIH1cbiAgdXBkYXRlUHJvamVjdExpc3QocHJvamVjdElkKTtcbiAgaGlkZU1lbnUoJ2VkaXQtdGFzay1tZW51Jyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRhc2soaWQpIHtcbiAgc3F1YXNoRWRpdChpZCk7XG4gIHRhc2tNYXN0ZXIucmVtb3ZlKGlkKTtcbiAgcmVsb2FkTGlzdCgpO1xufVxuXG5mdW5jdGlvbiBjbGVhckNvbXBsZXRlZFRhc2tzKCkge1xuICBjb25zdCBjdXJyZW50TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWRpc3BsYXknKS5kYXRhc2V0Lmxpc3RJZDtcbiAgY29uc3QgdGFza0xpc3QgPSBmaW5kTGlzdChjdXJyZW50TGlzdCk7XG4gIGNvbnN0IGNvbXBsZXRlZFRhc2tzID0gdGFza0xpc3QuZmlsdGVyKCh0YXNrKSA9PiB0YXNrLmNvbXBsZXRlZCA9PT0gdHJ1ZSk7XG4gIGNvbXBsZXRlZFRhc2tzLmZvckVhY2goKHRhc2spID0+IHJlbW92ZVRhc2sodGFzay5pZCkpO1xufVxuXG5mdW5jdGlvbiBjb21wbGV0ZVRhc2soaWQpIHtcbiAgY29uc3QgdGhpc1Rhc2sgPSB0YXNrTWFzdGVyLmZpbmRUYXNrKGlkKTtcbiAgdGhpc1Rhc2sudG9nZ2xlU3RhdHVzKCk7XG4gIHJlbG9hZExpc3QoKTtcbn1cblxuZnVuY3Rpb24gaXNXaXRoaW5XZWVrKHRhc2spIHtcbiAgcmV0dXJuIGlzV2l0aGluSW50ZXJ2YWwodGFzay5kYXRlLCB7XG4gICAgc3RhcnQ6IHN0YXJ0T2ZUb2RheSgpLFxuICAgIGVuZDogYWRkRGF5cyhzdGFydE9mVG9kYXkoKSwgOCksXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplQnV0dG9uRXZlbnRzKCkge1xuICBjb25zdCBob21lTGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaG9tZS1pdGVtJyk7XG4gIGhvbWVMaW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IG9wZW5MaXN0KGxpbmsuZGF0YXNldC5zb3J0SWQpKTtcbiAgfSk7XG4gIGNvbnN0IHJlbW92ZUNvbXBsZXRlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZW1vdmUtY29tcGxldGVkJyk7XG4gIHJlbW92ZUNvbXBsZXRlZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsZWFyQ29tcGxldGVkVGFza3MpO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVN0b3JhZ2UoKSB7XG4gIGluaXRpYWxpemVUYXNrcygpO1xuICBpbml0aWFsaXplUHJvamVjdHMoKTtcbiAgY29uc3Qgc3RvcmVkUHJvamVjdExpc3QgPSBfLmRyb3AocHJvamVjdE1hc3Rlci5yZWFkKCksIDEpO1xuICBzdG9yZWRQcm9qZWN0TGlzdC5mb3JFYWNoKChwcm9qZWN0KSA9PiBhZGRQcm9qZWN0VG9MaXN0KHByb2plY3QpKTtcbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVVJKCkge1xuICByZXRyaWV2ZVN0b3JhZ2UoKTtcbiAgaW5pdGlhbGl6ZUZvcm1Db250cm9sbGVyKCk7XG4gIGluaXRpYWxpemVCdXR0b25FdmVudHMoKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiBvcGVuTGlzdCgzKSk7XG59XG5cbmV4cG9ydCB7IGluaXRpYWxpemVVSSwgcmVsb2FkTGlzdCwgYWRkUHJvamVjdFRvTGlzdCB9O1xuIiwiaW1wb3J0IGlzU2FtZURheSBmcm9tIFwiLi4vaXNTYW1lRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1RvZGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBub3QgcHJlc2VudCBpbiB0aGUgRlAgc3VibW9kdWxlIGFzXG4gKiA+IGl0IHVzZXMgYERhdGUubm93KClgIGludGVybmFsbHkgaGVuY2UgaW1wdXJlIGFuZCBjYW4ndCBiZSBzYWZlbHkgY3VycmllZC5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHRvZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgNiBPY3RvYmVyIDIwMTQsIGlzIDYgT2N0b2JlciAxNDowMDowMCB0b2RheT9cbiAqIHZhciByZXN1bHQgPSBpc1RvZGF5KG5ldyBEYXRlKDIwMTQsIDksIDYsIDE0LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVG9kYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gaXNTYW1lRGF5KGRpcnR5RGF0ZSwgRGF0ZS5ub3coKSk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzV2l0aGluSW50ZXJ2YWxcbiAqIEBjYXRlZ29yeSBJbnRlcnZhbCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB3aXRoaW4gdGhlIGludGVydmFsP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgd2l0aGluIHRoZSBpbnRlcnZhbD8gKEluY2x1ZGluZyBzdGFydCBhbmQgZW5kLilcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIGZ1bmN0aW9uIHdhcyByZW5hbWVkIGZyb20gYGlzV2l0aGluUmFuZ2VgIHRvIGBpc1dpdGhpbkludGVydmFsYC5cbiAqICAgVGhpcyBjaGFuZ2Ugd2FzIG1hZGUgdG8gbWlycm9yIHRoZSB1c2Ugb2YgdGhlIHdvcmQgXCJpbnRlcnZhbFwiIGluIHN0YW5kYXJkIElTTyA4NjAxOjIwMDQgdGVybWlub2xvZ3k6XG4gKlxuICogICBgYGBcbiAqICAgMi4xLjNcbiAqICAgdGltZSBpbnRlcnZhbFxuICogICBwYXJ0IG9mIHRoZSB0aW1lIGF4aXMgbGltaXRlZCBieSB0d28gaW5zdGFudHNcbiAqICAgYGBgXG4gKlxuICogICBBbHNvLCB0aGlzIGZ1bmN0aW9uIG5vdyBhY2NlcHRzIGFuIG9iamVjdCB3aXRoIGBzdGFydGAgYW5kIGBlbmRgIHByb3BlcnRpZXNcbiAqICAgaW5zdGVhZCBvZiB0d28gYXJndW1lbnRzIGFzIGFuIGludGVydmFsLlxuICogICBUaGlzIGZ1bmN0aW9uIG5vdyB0aHJvd3MgYFJhbmdlRXJyb3JgIGlmIHRoZSBzdGFydCBvZiB0aGUgaW50ZXJ2YWwgaXMgYWZ0ZXIgaXRzIGVuZFxuICogICBvciBpZiBhbnkgZGF0ZSBpbiB0aGUgaW50ZXJ2YWwgaXMgYEludmFsaWQgRGF0ZWAuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqXG4gKiAgIGlzV2l0aGluUmFuZ2UoXG4gKiAgICAgbmV3IERhdGUoMjAxNCwgMCwgMyksXG4gKiAgICAgbmV3IERhdGUoMjAxNCwgMCwgMSksIG5ldyBEYXRlKDIwMTQsIDAsIDcpXG4gKiAgIClcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqXG4gKiAgIGlzV2l0aGluSW50ZXJ2YWwoXG4gKiAgICAgbmV3IERhdGUoMjAxNCwgMCwgMyksXG4gKiAgICAgeyBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMSksIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgNykgfVxuICogICApXG4gKiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtJbnRlcnZhbH0gaW50ZXJ2YWwgLSB0aGUgaW50ZXJ2YWwgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB3aXRoaW4gdGhlIGludGVydmFsXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBUaGUgc3RhcnQgb2YgYW4gaW50ZXJ2YWwgY2Fubm90IGJlIGFmdGVyIGl0cyBlbmRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IERhdGUgaW4gaW50ZXJ2YWwgY2Fubm90IGJlIGBJbnZhbGlkIERhdGVgXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgZGF0ZSB3aXRoaW4gdGhlIGludGVydmFsOlxuICogaXNXaXRoaW5JbnRlcnZhbChuZXcgRGF0ZSgyMDE0LCAwLCAzKSwge1xuICogICBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMSksXG4gKiAgIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgNylcbiAqIH0pXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBkYXRlIG91dHNpZGUgb2YgdGhlIGludGVydmFsOlxuICogaXNXaXRoaW5JbnRlcnZhbChuZXcgRGF0ZSgyMDE0LCAwLCAxMCksIHtcbiAqICAgc3RhcnQ6IG5ldyBEYXRlKDIwMTQsIDAsIDEpLFxuICogICBlbmQ6IG5ldyBEYXRlKDIwMTQsIDAsIDcpXG4gKiB9KVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgZGF0ZSBlcXVhbCB0byBpbnRlcnZhbCBzdGFydDpcbiAqIGlzV2l0aGluSW50ZXJ2YWwoZGF0ZSwgeyBzdGFydCwgZW5kOiBkYXRlIH0pIC8vID0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGRhdGUgZXF1YWwgdG8gaW50ZXJ2YWwgZW5kOlxuICogaXNXaXRoaW5JbnRlcnZhbChkYXRlLCB7IHN0YXJ0OiBkYXRlLCBlbmQgfSkgLy8gPT4gdHJ1ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1dpdGhpbkludGVydmFsKGRpcnR5RGF0ZSwgaW50ZXJ2YWwpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgc3RhcnRUaW1lID0gdG9EYXRlKGludGVydmFsLnN0YXJ0KS5nZXRUaW1lKCk7XG4gIHZhciBlbmRUaW1lID0gdG9EYXRlKGludGVydmFsLmVuZCkuZ2V0VGltZSgpOyAvLyBUaHJvdyBhbiBleGNlcHRpb24gaWYgc3RhcnQgZGF0ZSBpcyBhZnRlciBlbmQgZGF0ZSBvciBpZiBhbnkgZGF0ZSBpcyBgSW52YWxpZCBEYXRlYFxuXG4gIGlmICghKHN0YXJ0VGltZSA8PSBlbmRUaW1lKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIGludGVydmFsJyk7XG4gIH1cblxuICByZXR1cm4gdGltZSA+PSBzdGFydFRpbWUgJiYgdGltZSA8PSBlbmRUaW1lO1xufSIsImltcG9ydCB7IGZvcm1hdCwgc3RhcnRPZlRvZGF5IH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IHsgdGFza01hc3RlciB9IGZyb20gJy4vdGFza3MnO1xuaW1wb3J0IHsgcHJvamVjdE1hc3RlciB9IGZyb20gJy4vcHJvamVjdHMnO1xuXG5jb25zdCBpbnNlcnRUb3AgPSAobWVudSkgPT4ge1xuICBjb25zdCBtZW51c1NlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudXMnKTtcbiAgbWVudXNTZWN0aW9uLmluc2VydEJlZm9yZShtZW51LCBtZW51c1NlY3Rpb24uZmlyc3RFbGVtZW50Q2hpbGQpO1xufTtcblxuY29uc3QgdXBkYXRlU2VsZWN0T3B0aW9ucyA9ICgpID0+IHtcbiAgY29uc3QgbWVudXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudXMnKTtcbiAgY29uc3QgZm9ybXMgPSBtZW51cy5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtJyk7XG4gIGZvcm1zLmZvckVhY2goKGZvcm0pID0+IHtcbiAgICBjb25zdCBwcm9qZWN0U2VsZWN0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdzZWxlY3QnKTtcbiAgICB3aGlsZSAocHJvamVjdFNlbGVjdC5jaGlsZEVsZW1lbnRDb3VudCA+IDApIHtcbiAgICAgIHByb2plY3RTZWxlY3QucmVtb3ZlQ2hpbGQocHJvamVjdFNlbGVjdC5maXJzdEVsZW1lbnRDaGlsZCk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvamVjdExpc3QgPSBwcm9qZWN0TWFzdGVyLnJlYWQoKTtcbiAgICBwcm9qZWN0TGlzdC5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XG4gICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHByb2plY3QubmFtZTtcbiAgICAgIG9wdGlvbi52YWx1ZSA9IHByb2plY3QuaWQ7XG4gICAgICBwcm9qZWN0U2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuY29uc3QgdXBkYXRlU2VsZWN0VmFsdWVzID0gKCkgPT4ge1xuICBjb25zdCBsaXN0SWQgPSBOdW1iZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21haW4tZGlzcGxheScpLmRhdGFzZXQubGlzdElkKTtcbiAgY29uc3QgYWRkVGFza0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkLXRhc2stZm9ybScpO1xuICBjb25zdCBwcm9qZWN0U2VsZWN0QWRkID0gYWRkVGFza0Zvcm0ucXVlcnlTZWxlY3Rvcignc2VsZWN0Jyk7XG4gIHByb2plY3RTZWxlY3RBZGQudmFsdWUgPSBsaXN0SWQgPiAzID8gbGlzdElkIDogMztcbn07XG5cbmNvbnN0IHZhbGlkYXRlTmFtZUlucHV0ID0gKGZvcm0pID0+IHtcbiAgY29uc3QgbmFtZUZpZWxkID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwibmFtZVwiXScpO1xuICBjb25zdCBzdWJtaXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5zdWJtaXQnKTtcbiAgaWYgKG5hbWVGaWVsZC52YWxpZGl0eS52YWxpZCkge1xuICAgIHN1Ym1pdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gIH0gZWxzZSB7XG4gICAgc3VibWl0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAnICcpO1xuICB9XG59O1xuXG5jb25zdCBzaG93QWRkID0gKCkgPT4ge1xuICBjb25zdCBjdXJyZW50TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluLWRpc3BsYXknKS5kYXRhc2V0Lmxpc3RJZDtcbiAgY29uc3QgYWRkVGFza01lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYWRkLXRhc2stbWVudScpO1xuICBjb25zdCBhZGRUYXNrRm9ybSA9IGFkZFRhc2tNZW51LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcbiAgY29uc3QgZGF0ZUlucHV0ID0gYWRkVGFza0Zvcm0ucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cImRhdGVcIl0nKTtcbiAgYWRkVGFza0Zvcm0ucmVzZXQoKTtcbiAgYWRkVGFza01lbnUuY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheS1ub25lJyk7XG5cbiAgaWYgKE51bWJlcihjdXJyZW50TGlzdCkgPT09IDEpIHtcbiAgICBkYXRlSW5wdXQudmFsdWUgPSBmb3JtYXQoc3RhcnRPZlRvZGF5KCksICd5eXl5LU1NLWRkJyk7XG4gIH1cblxuICB1cGRhdGVTZWxlY3RWYWx1ZXMoKTtcbiAgaW5zZXJ0VG9wKGFkZFRhc2tNZW51KTtcbiAgdmFsaWRhdGVOYW1lSW5wdXQoYWRkVGFza0Zvcm0pO1xufTtcblxuY29uc3QgZ2V0VGFza0luZm8gPSAoaWQpID0+IHtcbiAgY29uc3QgZWRpdFRhc2tGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VkaXQtdGFzay1mb3JtJyk7XG4gIGNvbnN0IGVkaXROYW1lID0gZWRpdFRhc2tGb3JtLnF1ZXJ5U2VsZWN0b3IoJyN0YXNrLW5hbWUtZWRpdCcpO1xuICBjb25zdCBlZGl0RGVzY3JpcHRpb24gPSBlZGl0VGFza0Zvcm0ucXVlcnlTZWxlY3RvcignI3Rhc2stZGVzY3JpcHRpb24tZWRpdCcpO1xuICBjb25zdCBlZGl0RGF0ZSA9IGVkaXRUYXNrRm9ybS5xdWVyeVNlbGVjdG9yKCcjdGFzay1kYXRlLWVkaXQnKTtcbiAgY29uc3QgZWRpdFByb2plY3QgPSBlZGl0VGFza0Zvcm0ucXVlcnlTZWxlY3RvcignI3Byb2plY3QtZWRpdCcpO1xuICBjb25zdCBlZGl0UHJpb3JpdHkgPSBlZGl0VGFza0Zvcm0ucXVlcnlTZWxlY3RvckFsbChcbiAgICAnaW5wdXRbbmFtZT1wcmlvcml0eS1lZGl0XSdcbiAgKTtcblxuICBjb25zdCB0aGlzVGFzayA9IHRhc2tNYXN0ZXIuZmluZFRhc2soaWQpO1xuICBlZGl0TmFtZS52YWx1ZSA9IHRoaXNUYXNrLm5hbWU7XG4gIGVkaXREZXNjcmlwdGlvbi52YWx1ZSA9IHRoaXNUYXNrLmRlc2NyaXB0aW9uO1xuICBlZGl0RGF0ZS52YWx1ZSA9ICF0aGlzVGFzay5kYXRlID8gJycgOiBmb3JtYXQodGhpc1Rhc2suZGF0ZSwgJ3l5eXktTU0tZGQnKTtcbiAgZWRpdFByb2plY3QudmFsdWUgPSB0aGlzVGFzay5wcm9qZWN0SWQ7XG4gIGVkaXRQcmlvcml0eS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgIGlmIChpbnB1dC52YWx1ZSA9PT0gdGhpc1Rhc2sucHJpb3JpdHkpIHtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKCdjaGVja2VkJyk7XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IHNob3dFZGl0ID0gKGlkKSA9PiB7XG4gIGNvbnN0IHNob3dFZGl0TWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0LXRhc2stbWVudScpO1xuICBjb25zdCBlZGl0VGFza0Zvcm0gPSBzaG93RWRpdE1lbnUucXVlcnlTZWxlY3RvcignZm9ybScpO1xuICBlZGl0VGFza0Zvcm0uZGF0YXNldC50YXNrSWQgPSBpZDtcbiAgaWYgKHNob3dFZGl0TWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc3BsYXktbm9uZScpKSB7XG4gICAgc2hvd0VkaXRNZW51LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc3BsYXktbm9uZScpO1xuICB9XG4gIGdldFRhc2tJbmZvKGlkKTtcbiAgaW5zZXJ0VG9wKHNob3dFZGl0TWVudSk7XG4gIHZhbGlkYXRlTmFtZUlucHV0KGVkaXRUYXNrRm9ybSk7XG59O1xuXG5jb25zdCBzaG93QWRkUHJvamVjdCA9ICgpID0+IHtcbiAgY29uc3Qgc2hvd0FkZFByb2plY3RNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2FkZC1wcm9qZWN0LW1lbnUnKTtcbiAgY29uc3QgYWRkUHJvamVjdEZvcm0gPSBzaG93QWRkUHJvamVjdE1lbnUucXVlcnlTZWxlY3RvcignZm9ybScpO1xuICBzaG93QWRkUHJvamVjdE1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheS1ub25lJyk7XG4gIHZhbGlkYXRlTmFtZUlucHV0KGFkZFByb2plY3RGb3JtKTtcbn07XG5cbmNvbnN0IHNob3dSZW5hbWUgPSAoaWQsIHByb2plY3RJdGVtKSA9PiB7XG4gIGNvbnN0IHJlbmFtZVByb2plY3RNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JlbmFtZS1wcm9qZWN0LW1lbnUnKTtcbiAgY29uc3QgcmVuYW1lUHJvamVjdEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVuYW1lLXByb2plY3QtZm9ybScpO1xuICBjb25zdCBuYW1lSW5wdXQgPSByZW5hbWVQcm9qZWN0Rm9ybS5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwibmFtZVwiXScpO1xuICBjb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0LWxpc3QnKTtcbiAgY29uc3QgdGhpc0l0ZW0gPSBwcm9qZWN0SXRlbS5wYXJlbnRFbGVtZW50O1xuXG4gIGlmIChyZW5hbWVQcm9qZWN0Rm9ybS5kYXRhc2V0LnByb2plY3RJZCAhPT0gJ251bGwnKSB7XG4gICAgaGlkZU1lbnUoJ3JlbmFtZS1wcm9qZWN0LW1lbnUnKVxuICB9XG5cbiAgcmVuYW1lUHJvamVjdEZvcm0uZGF0YXNldC5yZW5hbWVJZCA9IGlkO1xuICBuYW1lSW5wdXQudmFsdWUgPSBwcm9qZWN0TWFzdGVyLmZpbmRQcm9qZWN0KGlkKS5uYW1lO1xuICBwcm9qZWN0TGlzdC5pbnNlcnRCZWZvcmUocmVuYW1lUHJvamVjdE1lbnUsIHRoaXNJdGVtKTtcbiAgdGhpc0l0ZW0uY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1ub25lJyk7XG4gIHJlbmFtZVByb2plY3RNZW51LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc3BsYXktbm9uZScpO1xuICB2YWxpZGF0ZU5hbWVJbnB1dChyZW5hbWVQcm9qZWN0Rm9ybSk7XG59O1xuXG5jb25zdCBoaWRlUmVuYW1lID0gKG1lbnUpID0+IHtcbiAgY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdC1saXN0Jyk7XG4gIGNvbnN0IHJlbmFtZU1lbnUgPSBtZW51O1xuICBjb25zdCByZW5hbWVGb3JtID0gbWVudS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgcmVuYW1lRm9ybS5kYXRhc2V0LnJlbmFtZUlkID0gbnVsbDtcbiAgcmVuYW1lTWVudS5uZXh0RWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheS1ub25lJyk7XG4gIHByb2plY3RMaXN0Lmluc2VydEJlZm9yZShyZW5hbWVNZW51LCBwcm9qZWN0TGlzdC5maXJzdEVsZW1lbnRDaGlsZCk7XG59O1xuXG5cblxuY29uc3Qgc3F1YXNoRWRpdCA9IChpZCkgPT4ge1xuICBjb25zdCBlZGl0VGFza0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZWRpdC10YXNrLWZvcm0nKTtcblxuICBpZiAoIVtpZCwgZWRpdFRhc2tGb3JtLmRhdGFzZXQudGFza0lkXS5pbmNsdWRlcygnbnVsbCcpKSB7XG4gICAgY29uc3QgaWROdW0gPSBOdW1iZXIoaWQpO1xuICAgIGNvbnN0IGVsZW1lbnRJZCA9IE51bWJlcihlZGl0VGFza0Zvcm0uZGF0YXNldC50YXNrSWQpO1xuXG4gICAgaWYgKGlkTnVtID09PSBlbGVtZW50SWQpIHtcbiAgICAgIGhpZGVNZW51KGVkaXRUYXNrRm9ybS5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgfVxuICB9XG59O1xuY29uc3Qgc2V0TWluRGF0ZSA9ICgpID0+IHtcbiAgY29uc3QgZGF0ZUlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9ZGF0ZV0nKTtcbiAgY29uc3QgdG9kYXkgPSBmb3JtYXQobmV3IERhdGUoKSwgJ3l5eXktTU0tZGQnKTtcbiAgZGF0ZUlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4gaW5wdXQuc2V0QXR0cmlidXRlKCdtaW4nLCB0b2RheSkpO1xufTtcblxuZnVuY3Rpb24gaGlkZU1lbnUoYnRuKSB7XG4gIGxldCBtZW51O1xuICBzd2l0Y2ggKGJ0bikge1xuICAgIGNhc2UgJ2FkZC10YXNrLW1lbnUnOlxuICAgICAgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtdGFzay1tZW51Jyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlZGl0LXRhc2stbWVudSc6XG4gICAgICBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VkaXQtdGFzay1tZW51Jyk7XG4gICAgICBtZW51LmZpcnN0RWxlbWVudENoaWxkLmRhdGFzZXQudGFza0lkID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2FkZC1wcm9qZWN0LW1lbnUnOlxuICAgICAgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtcHJvamVjdC1tZW51Jyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZW5hbWUtcHJvamVjdC1tZW51JzpcbiAgICAgIG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVuYW1lLXByb2plY3QtbWVudScpO1xuICAgICAgaGlkZVJlbmFtZShtZW51KTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIE5vIGRlZmF1bHRcbiAgfVxuXG4gIGNvbnN0IGZvcm0gPSBtZW51LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcbiAgZm9ybS5yZXNldCgpO1xuICBtZW51LmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXktbm9uZScpO1xufTtcblxuY29uc3QgaW5pdGlhbGl6ZUJ1dHRvbkV2ZW50cyA9ICgpID0+IHtcbiAgY29uc3QgY2FuY2VsQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYW5jZWwnKTtcbiAgY2FuY2VsQnRucy5mb3JFYWNoKChidXR0b24pID0+XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGhpZGVNZW51KGUudGFyZ2V0LmRhdGFzZXQubWVudSk7XG4gICAgfSlcbiAgKTtcbn07XG5cbmNvbnN0IGluaXRpYWxpemVGb3JtcyA9ICgpID0+IHtcbiAgY29uc3QgYWxsRm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtJyk7XG4gIGFsbEZvcm1zLmZvckVhY2goKGZvcm0pID0+IHtcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4gdmFsaWRhdGVOYW1lSW5wdXQoZm9ybSkpO1xuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IGUucHJldmVudERlZmF1bHQoKSk7XG4gIH0pO1xuICBzZXRNaW5EYXRlKCk7XG4gIHVwZGF0ZVNlbGVjdE9wdGlvbnMoKTtcbn07XG5cbmNvbnN0IGluaXRpYWxpemVGb3JtQ29udHJvbGxlciA9ICgpID0+IHtcbiAgaW5pdGlhbGl6ZUJ1dHRvbkV2ZW50cygpO1xuICBpbml0aWFsaXplRm9ybXMoKTtcbn07XG5cbmV4cG9ydCB7XG4gIGluaXRpYWxpemVGb3JtQ29udHJvbGxlcixcbiAgc2hvd0FkZCxcbiAgc2hvd0FkZFByb2plY3QsXG4gIHNob3dFZGl0LFxuICBoaWRlTWVudSxcbiAgdXBkYXRlU2VsZWN0T3B0aW9ucyxcbiAgdXBkYXRlU2VsZWN0VmFsdWVzLFxuICBzcXVhc2hFZGl0LFxuICBzaG93UmVuYW1lLFxufTtcbiIsImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB0YXNrTWFzdGVyIH0gZnJvbSAnLi90YXNrcyc7XG5cbmNsYXNzIFByb2plY3Qge1xuICBjb25zdHJ1Y3RvcihpZCwgbmFtZSkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG5cbiAgdGFza0xpc3QoKSB7XG4gICAgcmV0dXJuIHRhc2tNYXN0ZXIuZmluZFByb2plY3QodGhpcy5pZCk7XG4gIH1cbn1cblxuLy8gY29uc3QgcHJvamVjdEZhY3RvcnkgPSAoaWQsIG5hbWUpID0+IHtcbi8vICAgY29uc3QgdGFza0xpc3QgPSAoKSA9PiB0YXNrTWFzdGVyLmZpbmRQcm9qZWN0KGlkKTtcbi8vICAgcmV0dXJuIHtcbi8vICAgICB0YXNrTGlzdCxcbi8vICAgICBnZXQgaWQoKSB7XG4vLyAgICAgICByZXR1cm4gaWQ7XG4vLyAgICAgfSxcbi8vICAgICBzZXQgaWQobmV3SWQpIHtcbi8vICAgICAgIGlkID0gbmV3SWQ7XG4vLyAgICAgfSxcbi8vICAgICBnZXQgbmFtZSgpIHtcbi8vICAgICAgIHJldHVybiBuYW1lO1xuLy8gICAgIH0sXG4vLyAgICAgc2V0IG5hbWUobmV3TmFtZSkge1xuLy8gICAgICAgbmFtZSA9IG5ld05hbWU7XG4vLyAgICAgfSxcbi8vICAgfTtcbi8vIH07XG5cbmNvbnN0IHByb2plY3RNYXN0ZXIgPSAoKCkgPT4ge1xuICBjb25zdCBwcm9qZWN0TGlzdCA9IFtdO1xuICBjb25zdCBwdXNoID0gKHByb2plY3QpID0+IHByb2plY3RMaXN0LnB1c2gocHJvamVjdCk7XG4gIGNvbnN0IHJlYWQgPSAoKSA9PiBwcm9qZWN0TGlzdDtcbiAgY29uc3QgZmluZFByb2plY3QgPSAoaWQpID0+IHtcbiAgICBjb25zdCBpZE51bSA9IE51bWJlcihpZCk7XG4gICAgcmV0dXJuIHByb2plY3RMaXN0LmZpbmQoKHByb2plY3QpID0+IHByb2plY3QuaWQgPT09IGlkTnVtKTtcbiAgfTtcbiAgY29uc3QgcmVtb3ZlID0gKGlkKSA9PiB7XG4gICAgY29uc3QgaWROdW0gPSBOdW1iZXIoaWQpO1xuICAgIF8ucmVtb3ZlKHByb2plY3RMaXN0LCBmaW5kUHJvamVjdChpZCkpO1xuICAgIHByb2plY3RMaXN0LmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgIGlmIChwcm9qZWN0LmlkID4gaWROdW0pIHtcbiAgICAgICAgcHJvamVjdC50YXNrTGlzdCgpLmZvckVhY2goKHRhc2spID0+IHtcbiAgICAgICAgICB0YXNrLnByb2plY3RJZCAtPSAxO1xuICAgICAgICB9KTtcbiAgICAgICAgcHJvamVjdC5pZCAtPSAxO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcHVzaCxcbiAgICByZWFkLFxuICAgIGZpbmRQcm9qZWN0LFxuICAgIHJlbW92ZSxcbiAgfTtcbn0pKCk7XG5cbmNvbnN0IHNhdmVUb0xvY2FsU3RvcmFnZSA9ICgpID0+IHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Byb2plY3RMaXN0JywgSlNPTi5zdHJpbmdpZnkocHJvamVjdE1hc3Rlci5yZWFkKCkpKTtcbn07XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9qZWN0cygpIHtcbiAgaWYgKCdwcm9qZWN0TGlzdCcgaW4gbG9jYWxTdG9yYWdlKSB7XG4gICAgbGV0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdExpc3QnKSk7XG4gICAgcHJvamVjdHMgPSBfLmRyb3AocHJvamVjdHMsIDEpO1xuICAgIHByb2plY3RzLmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgIHByb2plY3RNYXN0ZXIucHVzaChuZXcgUHJvamVjdCguLi5PYmplY3QudmFsdWVzKHByb2plY3QpKSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgUHJvamVjdCxcbiAgcHJvamVjdE1hc3RlcixcbiAgc2F2ZVRvTG9jYWxTdG9yYWdlIGFzIHN0b3JlUHJvamVjdExpc3QsXG4gIGluaXRpYWxpemVQcm9qZWN0cyxcbn07XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgcGFyc2VKU09OIH0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5jbGFzcyBUYXNrIHtcbiAgY29uc3RydWN0b3IoaWQsIG5hbWUsIGRlc2NyaXB0aW9uLCBkYXRlLCBwcm9qZWN0SWQsIHByaW9yaXR5LCBjb21wbGV0ZWQgPSBmYWxzZSkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLmRhdGUgPSBkYXRlO1xuICAgIHRoaXMucHJvamVjdElkID0gcHJvamVjdElkO1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICB0aGlzLmNvbXBsZXRlZCA9IGNvbXBsZXRlZDtcbiAgfVxuXG4gIHRvZ2dsZVN0YXR1cygpIHtcbiAgICB0aGlzLmNvbXBsZXRlZCA9ICF0aGlzLmNvbXBsZXRlZFxuICB9XG59XG5cbi8vIGNvbnN0IHRhc2tGYWN0b3J5ID0gKFxuLy8gICBpZCxcbi8vICAgbmFtZSxcbi8vICAgZGVzY3JpcHRpb24sXG4vLyAgIGRhdGUsXG4vLyAgIHByb2plY3RJZCxcbi8vICAgcHJpb3JpdHksXG4vLyAgIGNvbXBsZXRlZCA9IGZhbHNlXG4vLyApID0+IHtcbi8vICAgcmV0dXJuIHtcbi8vICAgICBnZXQgaWQoKSB7XG4vLyAgICAgICByZXR1cm4gaWQ7XG4vLyAgICAgfSxcbi8vICAgICBzZXQgaWQobmV3SWQpIHtcbi8vICAgICAgIGlkID0gbmV3SWQ7XG4vLyAgICAgfSxcbi8vICAgICBnZXQgbmFtZSgpIHtcbi8vICAgICAgIHJldHVybiBuYW1lO1xuLy8gICAgIH0sXG4vLyAgICAgc2V0IG5hbWUobmV3TmFtZSkge1xuLy8gICAgICAgbmFtZSA9IG5ld05hbWU7XG4vLyAgICAgfSxcbi8vICAgICBnZXQgZGVzY3JpcHRpb24oKSB7XG4vLyAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4vLyAgICAgfSxcbi8vICAgICBzZXQgZGVzY3JpcHRpb24obmV3RGVzY3JpcHRpb24pIHtcbi8vICAgICAgIGRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4vLyAgICAgfSxcbi8vICAgICBnZXQgZGF0ZSgpIHtcbi8vICAgICAgIHJldHVybiBkYXRlO1xuLy8gICAgIH0sXG4vLyAgICAgc2V0IGRhdGUobmV3RGF0ZSkge1xuLy8gICAgICAgZGF0ZSA9IG5ld0RhdGU7XG4vLyAgICAgfSxcbi8vICAgICBnZXQgcHJvamVjdElkKCkge1xuLy8gICAgICAgcmV0dXJuIHByb2plY3RJZDtcbi8vICAgICB9LFxuLy8gICAgIHNldCBwcm9qZWN0SWQobmV3UHJvamVjdElkKSB7XG4vLyAgICAgICBwcm9qZWN0SWQgPSBuZXdQcm9qZWN0SWQ7XG4vLyAgICAgfSxcbi8vICAgICBnZXQgcHJpb3JpdHkoKSB7XG4vLyAgICAgICByZXR1cm4gcHJpb3JpdHk7XG4vLyAgICAgfSxcbi8vICAgICBzZXQgcHJpb3JpdHkobmV3UHJpb3JpdHkpIHtcbi8vICAgICAgIHByaW9yaXR5ID0gbmV3UHJpb3JpdHk7XG4vLyAgICAgfSxcbi8vICAgICBnZXQgY29tcGxldGVkKCkge1xuLy8gICAgICAgcmV0dXJuIGNvbXBsZXRlZDtcbi8vICAgICB9LFxuLy8gICAgIHNldCBjb21wbGV0ZWQobmV3Q29tcGxldGVkKSB7XG4vLyAgICAgICBjb21wbGV0ZWQgPSBuZXdDb21wbGV0ZWQ7XG4vLyAgICAgfSxcbi8vICAgfTtcbi8vIH07XG5cbmNvbnN0IHRhc2tNYXN0ZXIgPSAoKCkgPT4ge1xuICBjb25zdCB0YXNrTGlzdCA9IFtdO1xuICBjb25zdCBwdXNoID0gKHRhc2spID0+IHRhc2tMaXN0LnB1c2godGFzayk7XG4gIGNvbnN0IHJlYWQgPSAoKSA9PiB0YXNrTGlzdDtcbiAgY29uc3QgZmluZFRhc2sgPSAoaWQpID0+IHtcbiAgICBjb25zdCBpZE51bSA9IE51bWJlcihpZCk7XG4gICAgY29uc3QgdGhpc1Rhc2sgPSB0YXNrTGlzdC5maW5kKCh0YXNrKSA9PiB0YXNrLmlkID09PSBpZE51bSk7XG4gICAgcmV0dXJuIHRoaXNUYXNrO1xuICB9O1xuICBjb25zdCBmaW5kUHJvamVjdCA9IChpZCkgPT4ge1xuICAgIGNvbnN0IHByb2plY3RJZE51bSA9IE51bWJlcihpZCk7XG4gICAgY29uc3QgdGFza3MgPSB0YXNrTGlzdC5maWx0ZXIoKHRhc2spID0+IHRhc2sucHJvamVjdElkID09PSBwcm9qZWN0SWROdW0pO1xuICAgIHJldHVybiB0YXNrcztcbiAgfTtcbiAgY29uc3QgcmVtb3ZlID0gKGlkKSA9PiB7XG4gICAgY29uc3QgaWROdW0gPSBOdW1iZXIoaWQpO1xuICAgIF8ucmVtb3ZlKHRhc2tMaXN0LCBmaW5kVGFzayhpZE51bSkpO1xuICAgIHRhc2tMaXN0LmZvckVhY2goKHRhc2spID0+IHtcbiAgICAgIGlmICh0YXNrLmlkID4gaWROdW0pIHtcbiAgICAgICAgdGFzay5pZCAtPSAxO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcHVzaCxcbiAgICByZWFkLFxuICAgIGZpbmRUYXNrLFxuICAgIGZpbmRQcm9qZWN0LFxuICAgIHJlbW92ZSxcbiAgfTtcbn0pKCk7XG5cbmZ1bmN0aW9uIHNhdmVUb0xvY2FsU3RvcmFnZSgpIHtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rhc2tMaXN0JywgSlNPTi5zdHJpbmdpZnkodGFza01hc3Rlci5yZWFkKCkpKTtcbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVRhc2tzKCkge1xuICBpZiAoJ3Rhc2tMaXN0JyBpbiBsb2NhbFN0b3JhZ2UpIHtcbiAgICBjb25zdCB0YXNrcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rhc2tMaXN0JykpO1xuICAgIHRhc2tzLmZvckVhY2goKHRhc2spID0+IHtcbiAgICAgIHRhc2suZGF0ZSA9IHRhc2suZGF0ZSA/IHBhcnNlSlNPTih0YXNrLmRhdGUpIDogbnVsbDtcbiAgICAgIHRhc2tNYXN0ZXIucHVzaChuZXcgVGFzayguLi5PYmplY3QudmFsdWVzKHRhc2spKSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgVGFzayxcbiAgdGFza01hc3RlcixcbiAgc2F2ZVRvTG9jYWxTdG9yYWdlIGFzIHN0b3JlVGFza0xpc3QsXG4gIGluaXRpYWxpemVUYXNrcyxcbn07XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHBhcnNlSlNPTlxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBQYXJzZSBhIEpTT04gZGF0ZSBzdHJpbmdcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIGEgY29tcGxldGUgSVNPIGRhdGUgc3RyaW5nIGluIFVUQyB0aW1lLCB0aGUgdHlwaWNhbCBmb3JtYXQgZm9yIHRyYW5zbWl0dGluZ1xuICogYSBkYXRlIGluIEpTT04sIHRvIGEgSmF2YVNjcmlwdCBgRGF0ZWAgaW5zdGFuY2UuXG4gKlxuICogVGhpcyBpcyBhIG1pbmltYWwgaW1wbGVtZW50YXRpb24gZm9yIGNvbnZlcnRpbmcgZGF0ZXMgcmV0cmlldmVkIGZyb20gYSBKU09OIEFQSSB0b1xuICogYSBgRGF0ZWAgaW5zdGFuY2Ugd2hpY2ggY2FuIGJlIHVzZWQgd2l0aCBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIGBkYXRlLWZuc2AgbGlicmFyeS5cbiAqIFRoZSBmb2xsb3dpbmcgZm9ybWF0cyBhcmUgc3VwcG9ydGVkOlxuICpcbiAqIC0gYDIwMDAtMDMtMTVUMDU6MjA6MTAuMTIzWmA6IFRoZSBvdXRwdXQgb2YgYC50b0lTT1N0cmluZygpYCBhbmQgYEpTT04uc3RyaW5naWZ5KG5ldyBEYXRlKCkpYFxuICogLSBgMjAwMC0wMy0xNVQwNToyMDoxMFpgOiBXaXRob3V0IG1pbGxpc2Vjb25kc1xuICogLSBgMjAwMC0wMy0xNVQwNToyMDoxMCswMDowMGA6IFdpdGggYSB6ZXJvIG9mZnNldCwgdGhlIGRlZmF1bHQgSlNPTiBlbmNvZGVkIGZvcm1hdCBpbiBzb21lIG90aGVyIGxhbmd1YWdlc1xuICogLSBgMjAwMC0wMy0xNVQwNToyMDoxMCswNTo0NWA6IFdpdGggYSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBvZmZzZXQsIHRoZSBkZWZhdWx0IEpTT04gZW5jb2RlZCBmb3JtYXQgaW4gc29tZSBvdGhlciBsYW5ndWFnZXNcbiAqIC0gYDIwMDAtMDMtMTVUMDU6MjA6MTArMDAwMGA6IFdpdGggYSB6ZXJvIG9mZnNldCB3aXRob3V0IGEgY29sb25cbiAqIC0gYDIwMDAtMDMtMTVUMDU6MjA6MTBgOiBXaXRob3V0IGEgdHJhaWxpbmcgJ1onIHN5bWJvbFxuICogLSBgMjAwMC0wMy0xNVQwNToyMDoxMC4xMjM0NTY3YDogVXAgdG8gNyBkaWdpdHMgaW4gbWlsbGlzZWNvbmRzIGZpZWxkLiBPbmx5IGZpcnN0IDMgYXJlIHRha2VuIGludG8gYWNjb3VudCBzaW5jZSBKUyBkb2VzIG5vdCBhbGxvdyBmcmFjdGlvbmFsIG1pbGxpc2Vjb25kc1xuICogLSBgMjAwMC0wMy0xNSAwNToyMDoxMGA6IFdpdGggYSBzcGFjZSBpbnN0ZWFkIG9mIGEgJ1QnIHNlcGFyYXRvciBmb3IgQVBJcyByZXR1cm5pbmcgYSBTUUwgZGF0ZSB3aXRob3V0IHJlZm9ybWF0dGluZ1xuICpcbiAqIEZvciBjb252ZW5pZW5jZSBhbmQgZWFzZSBvZiB1c2UgdGhlc2Ugb3RoZXIgaW5wdXQgdHlwZXMgYXJlIGFsc28gc3VwcG9ydGVkXG4gKiB2aWEgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9OlxuICpcbiAqIC0gQSBgRGF0ZWAgaW5zdGFuY2Ugd2lsbCBiZSBjbG9uZWRcbiAqIC0gQSBgbnVtYmVyYCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXBcbiAqXG4gKiBBbnkgb3RoZXIgaW5wdXQgdHlwZSBvciBpbnZhbGlkIGRhdGUgc3RyaW5ncyB3aWxsIHJldHVybiBhbiBgSW52YWxpZCBEYXRlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8RGF0ZX0gYXJndW1lbnQgQSBmdWxseSBmb3JtZWQgSVNPODYwMSBkYXRlIHN0cmluZyB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlSlNPTihhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBwYXJ0cyA9IGFyZ3VtZW50Lm1hdGNoKC8oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVtUIF0oXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGR7MCw3fSkpPyg/Olp8KC4pKFxcZHsyfSk6PyhcXGR7Mn0pPyk/Lyk7XG5cbiAgICBpZiAocGFydHMpIHtcbiAgICAgIC8vIEdyb3VwIDggbWF0Y2hlcyB0aGUgc2lnblxuICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKCtwYXJ0c1sxXSwgK3BhcnRzWzJdIC0gMSwgK3BhcnRzWzNdLCArcGFydHNbNF0gLSAoK3BhcnRzWzldIHx8IDApICogKHBhcnRzWzhdID09ICctJyA/IC0xIDogMSksICtwYXJ0c1s1XSAtICgrcGFydHNbMTBdIHx8IDApICogKHBhcnRzWzhdID09ICctJyA/IC0xIDogMSksICtwYXJ0c1s2XSwgKygocGFydHNbN10gfHwgJzAnKSArICcwMCcpLnN1YnN0cmluZygwLCAzKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgcmV0dXJuIHRvRGF0ZShhcmd1bWVudCk7XG59Il0sIm5hbWVzIjpbInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsImxlbmd0aCIsIlR5cGVFcnJvciIsInRvSW50ZWdlciIsImRpcnR5TnVtYmVyIiwiTmFOIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJNYXRoIiwiY2VpbCIsImZsb29yIiwiaXNEYXRlIiwidmFsdWUiLCJhcmd1bWVudHMiLCJEYXRlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiaXNWYWxpZCIsImRpcnR5RGF0ZSIsImRhdGUiLCJ0b0RhdGUiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwidG9rZW4iLCJjb3VudCIsIm9wdGlvbnMiLCJyZXN1bHQiLCJ0b2tlblZhbHVlIiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJidWlsZEZvcm1hdExvbmdGbiIsInVuZGVmaW5lZCIsIndpZHRoIiwiU3RyaW5nIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0IiwiZm9ybWF0cyIsImZvcm1hdExvbmciLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJkaXJ0eU9wdGlvbnMiLCJ2YWx1ZXNBcnJheSIsImNvbnRleHQiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwiYnVpbGRNYXRjaEZuIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJmaW5kSW5kZXgiLCJwYXR0ZXJuIiwidGVzdCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwib2JqZWN0IiwicHJlZGljYXRlIiwiaGFzT3duUHJvcGVydHkiLCJhcnJheSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsImZvcm1hdFJlbGF0aXZlIiwiX2RhdGUiLCJfYmFzZURhdGUiLCJfb3B0aW9ucyIsImxvY2FsaXplIiwib3JkaW5hbE51bWJlciIsInJlbTEwMCIsImVyYSIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsInF1YXJ0ZXIiLCJtb250aCIsImRheSIsImRheVBlcmlvZCIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VJbnQiLCJwYXJzZVJlc3VsdCIsImFueSIsImluZGV4Iiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiYWRkTWlsbGlzZWNvbmRzIiwiZGlydHlBbW91bnQiLCJ0aW1lc3RhbXAiLCJnZXRUaW1lIiwiYW1vdW50Iiwic3ViTWlsbGlzZWNvbmRzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRVVENGdWxsWWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnkiLCJNSUxMSVNFQ09ORFNfSU5fV0VFSyIsInN0YXJ0T2ZVVENXZWVrIiwibG9jYWxlIiwibG9jYWxlV2Vla1N0YXJ0c09uIiwiZGVmYXVsdFdlZWtTdGFydHNPbiIsIlJhbmdlRXJyb3IiLCJnZXRVVENXZWVrWWVhciIsImxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJhYnMiLCJ5Iiwic2lnbmVkWWVhciIsIk0iLCJnZXRVVENNb250aCIsImQiLCJhIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZ2V0VVRDSG91cnMiLCJ0b1VwcGVyQ2FzZSIsImgiLCJIIiwibSIsImdldFVUQ01pbnV0ZXMiLCJzIiwiZ2V0VVRDU2Vjb25kcyIsIlMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsImRheVBlcmlvZEVudW0iLCJHIiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicSIsIkwiLCJ3Iiwid2VlayIsInJvdW5kIiwiZ2V0VVRDV2VlayIsIkkiLCJpc29XZWVrIiwiZ2V0VVRDSVNPV2VlayIsIkQiLCJkYXlPZlllYXIiLCJzZXRVVENNb250aCIsInN0YXJ0T2ZZZWFyVGltZXN0YW1wIiwiZGlmZmVyZW5jZSIsImdldFVUQ0RheU9mWWVhciIsIkUiLCJkYXlPZldlZWsiLCJlIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaSIsImlzb0RheU9mV2VlayIsInRvTG93ZXJDYXNlIiwiYiIsImhvdXJzIiwiQiIsIksiLCJrIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInRpbWVMb25nRm9ybWF0dGVyIiwibG9uZ0Zvcm1hdHRlcnMiLCJwIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJ1dGNEYXRlIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5kZXhPZiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJpbnB1dCIsImNvbmNhdCIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJmb3JtYXRTdHIiLCJmb3JtYXR0ZXJPcHRpb25zIiwibWFwIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwiam9pbiIsImNsZWFuRXNjYXBlZFN0cmluZyIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJzdGFydE9mRGF5Iiwic2V0SG91cnMiLCJzdGFydE9mVG9kYXkiLCJub3ciLCJhcmd1bWVudCIsImFyZ1N0ciIsImNvbnNvbGUiLCJ3YXJuIiwiRXJyb3IiLCJzdGFjayIsImlzU2FtZURheSIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0U3RhcnRPZkRheSIsImRhdGVSaWdodFN0YXJ0T2ZEYXkiLCJhZGREYXlzIiwic2V0RGF0ZSIsImNyZWF0ZVRhc2tJdGVtIiwidGFzayIsInRhc2tJZCIsImlkIiwidGFza0l0ZW0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJkYXRhc2V0IiwiZWxlbWVudHMiLCJmb3JFYWNoIiwic2VjdGlvbiIsImRpdiIsInB1c2giLCJkZXRhaWxzIiwiaGVhZGVyIiwicGFyYSIsInRleHRDb250ZW50IiwibmFtZSIsImRlc2NyaXB0aW9uIiwicHJvamVjdElkIiwiYXBwZW5kIiwiY2hlY2tDaXJjbGUiLCJzZXRBdHRyaWJ1dGUiLCJwcmlvcml0eSIsImNvbXBsZXRlZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb21wbGV0ZVRhc2siLCJpbnNlcnRCZWZvcmUiLCJmaXJzdEVsZW1lbnRDaGlsZCIsInJpZ2h0U2lkZUJ0bnMiLCJpdGVtQnV0dG9ucyIsImoiLCJidXR0b24iLCJyZW1vdmVUYXNrIiwiYXBwZW5kQ2hpbGQiLCJnZW5lcmF0ZVRhc2tFdmVudHMiLCJyZW5kZXJUYXNrTGlzdCIsImxpc3ROYW1lIiwibGlzdElkIiwidGFza0xpc3QiLCJsaXN0VGl0bGUiLCJxdWVyeVNlbGVjdG9yIiwibWFpbkRpc3BsYXkiLCJwZW5kaW5nVGFza0xpc3QiLCJjb21wbGV0ZWRUYXNrTGlzdCIsImNoaWxkRWxlbWVudENvdW50IiwicmVtb3ZlQ2hpbGQiLCJjbGVhclRhc2tMaXN0IiwiZmlsdGVyIiwiZW1wdHlTcGxhc2giLCJ0ZXh0IiwiaWxsdXMiLCJyYW5kb20iLCJnZW5lcmF0ZUVtcHR5U3BsYXNoIiwibGlzdEl0ZW0iLCJmaW5kTGlzdCIsImlkTnVtIiwiaXNUb2RheSIsImludGVydmFsIiwic3RhcnRUaW1lIiwic3RhcnQiLCJlbmRUaW1lIiwiZW5kIiwiaXNXaXRoaW5JbnRlcnZhbCIsImlzV2l0aGluV2VlayIsIm9wZW5MaXN0IiwiaG9tZUl0ZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsInByb2plY3RJdGVtcyIsInBJIiwicGFyZW50RWxlbWVudCIsInJlbW92ZSIsInNvcnRJZCIsInNldEFjdGl2ZSIsInJlbG9hZExpc3QiLCJnZW5lcmF0ZVByb2plY3RFdmVudHMiLCJwcm9qZWN0IiwicHJvamVjdEl0ZW0iLCJyZW5hbWVQcm9qZWN0Rm9ybSIsInJlbmFtZUlkIiwiZWxlbWVudCIsInVwZGF0ZVByb2plY3RMaXN0IiwicmVtb3ZlUHJvamVjdCIsImFkZFByb2plY3RUb0xpc3QiLCJwcm9qZWN0TGlzdCIsImRpc3BsYXlXcmFwcGVyIiwicHJvamVjdExlZnQiLCJuYXZJY29uIiwicHJvamVjdE5hbWUiLCJwcm9qZWN0QnV0dG9ucyIsImJ1dHRvbnMiLCJjcmVhdGVQcm9qZWN0SXRlbSIsImNsZWFyQ29tcGxldGVkVGFza3MiLCJjdXJyZW50TGlzdCIsInRvZ2dsZVN0YXR1cyIsImluaXRpYWxpemVVSSIsImxpbmsiLCJ3aW5kb3ciLCJpbnNlcnRUb3AiLCJtZW51IiwibWVudXNTZWN0aW9uIiwidXBkYXRlU2VsZWN0T3B0aW9ucyIsImZvcm0iLCJwcm9qZWN0U2VsZWN0Iiwib3B0aW9uIiwidXBkYXRlU2VsZWN0VmFsdWVzIiwidmFsaWRhdGVOYW1lSW5wdXQiLCJuYW1lRmllbGQiLCJzdWJtaXQiLCJ2YWxpZGl0eSIsInZhbGlkIiwicmVtb3ZlQXR0cmlidXRlIiwic2hvd0FkZCIsImFkZFRhc2tNZW51IiwiYWRkVGFza0Zvcm0iLCJkYXRlSW5wdXQiLCJyZXNldCIsInNob3dFZGl0Iiwic2hvd0VkaXRNZW51IiwiZWRpdFRhc2tGb3JtIiwiY29udGFpbnMiLCJlZGl0TmFtZSIsImVkaXREZXNjcmlwdGlvbiIsImVkaXREYXRlIiwiZWRpdFByb2plY3QiLCJlZGl0UHJpb3JpdHkiLCJ0aGlzVGFzayIsImdldFRhc2tJbmZvIiwic2hvd0FkZFByb2plY3QiLCJzaG93QWRkUHJvamVjdE1lbnUiLCJhZGRQcm9qZWN0Rm9ybSIsInNob3dSZW5hbWUiLCJyZW5hbWVQcm9qZWN0TWVudSIsIm5hbWVJbnB1dCIsInRoaXNJdGVtIiwiaGlkZU1lbnUiLCJzcXVhc2hFZGl0IiwiaW5jbHVkZXMiLCJnZXRBdHRyaWJ1dGUiLCJidG4iLCJyZW5hbWVNZW51IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiaGlkZVJlbmFtZSIsImluaXRpYWxpemVGb3JtcyIsInByZXZlbnREZWZhdWx0IiwiZGF0ZUlucHV0cyIsInNldE1pbkRhdGUiLCJpbml0aWFsaXplRm9ybUNvbnRyb2xsZXIiLCJ0YXJnZXQiLCJQcm9qZWN0IiwiY29uc3RydWN0b3IiLCJ0aGlzIiwicHJvamVjdE1hc3RlciIsImZpbmRQcm9qZWN0IiwiZmluZCIsInJlYWQiLCJzYXZlVG9Mb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImluaXRpYWxpemVQcm9qZWN0cyIsInByb2plY3RzIiwicGFyc2UiLCJnZXRJdGVtIiwiVGFzayIsInRhc2tNYXN0ZXIiLCJmaW5kVGFzayIsInByb2plY3RJZE51bSIsImluaXRpYWxpemVUYXNrcyIsInBhcnRzIiwicGFyc2VKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==